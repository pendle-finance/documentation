"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[2458],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),k=r,u=d["".concat(o,".").concat(k)]||d[k]||m[k]||l;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5734:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const l={},i="Boros SDK",s={unversionedId:"Boros/Backend/SDK",id:"Boros/Backend/SDK",title:"Boros SDK",description:"The Exchange class provides an interface for interacting with the Boros trading platform. It handles operations such as placing orders, modifying orders, managing positions, and interacting with the blockchain.",source:"@site/docs/Boros/Backend/SDK.md",sourceDirName:"Boros/Backend",slug:"/Boros/Backend/SDK",permalink:"/cn/Boros/Backend/SDK",draft:!1,tags:[],version:"current",frontMatter:{}},o={},c=[{value:"Installation",id:"installation",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Example Flow: Creating an Agent and Placing an Order",id:"example-flow-creating-an-agent-and-placing-an-order",level:2},{value:"Order Management",id:"order-management",level:2},{value:"Get Tick at Interest",id:"get-tick-at-interest",level:3},{value:"Pay gas to treasury",id:"pay-gas-to-treasury",level:3},{value:"Place Order",id:"place-order",level:3},{value:"Bulk Place Orders",id:"bulk-place-orders",level:3},{value:"Modify Order",id:"modify-order",level:3},{value:"Bulk Modify Orders",id:"bulk-modify-orders",level:3},{value:"Cancel Orders",id:"cancel-orders",level:3},{value:"Bulk Cancel Orders",id:"bulk-cancel-orders",level:3},{value:"Agent Management",id:"agent-management",level:2},{value:"Approve Agent",id:"approve-agent",level:3},{value:"Funds Management",id:"funds-management",level:2},{value:"Deposit",id:"deposit",level:3},{value:"Withdraw",id:"withdraw",level:3},{value:"Cash Transfer",id:"cash-transfer",level:3},{value:"Position Management",id:"position-management",level:2},{value:"Close Active Positions",id:"close-active-positions",level:3},{value:"Settings Management",id:"settings-management",level:2},{value:"Update Settings",id:"update-settings",level:3},{value:"Data Retrieval",id:"data-retrieval",level:2},{value:"Get Markets",id:"get-markets",level:3},{value:"Get Order Book",id:"get-order-book",level:3},{value:"Get PnL Limit Orders",id:"get-pnl-limit-orders",level:3},{value:"Get Collaterals",id:"get-collaterals",level:3},{value:"Get Active Positions",id:"get-active-positions",level:3},{value:"Get Closed Positions",id:"get-closed-positions",level:3}],p={toc:c},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"boros-sdk"},"Boros SDK"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Exchange")," class provides an interface for interacting with the Boros trading platform. It handles operations such as placing orders, modifying orders, managing positions, and interacting with the blockchain."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @pendle/sdk-boros\n")),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"constructor(walletClient: WalletClient, root: Address, accountId: number)\n")),(0,r.kt)("p",null,"The Exchange class requires three parameters for initialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"walletClient"),": A viem WalletClient instance for signing transactions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root"),": The wallet address (Address type from viem)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"accountId"),": The numerical ID of the account to interact with")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createWalletClient, http } from 'viem';\nimport { Exchange } from 'pendle-sdk-boros';\n\nconst account = privateKeyToAccount(PRIVATE_KEY);\n\nconst walletClient = createWalletClient({\n  transport: http(RPC_URL),\n  account: account\n});\n\nconst exchange = new Exchange(\n  walletClient,\n  '0xYourWalletAddress',\n  0 // accountId\n);\n")),(0,r.kt)("h2",{id:"example-flow-creating-an-agent-and-placing-an-order"},"Example Flow: Creating an Agent and Placing an Order"),(0,r.kt)("p",null,"Below is a complete example showing how to pay gas to treasury, create an agent, approve it, and place an order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport {\n  Exchange,\n  Agent,\n  Side,\n  TimeInForce,\n  MarketAccLib,\n  setEnv\n} from 'pendle-sdk-boros';\n\nsetEnv('production');\n// Setup wallet client\nconst PRIVATE_KEY = '0xYourPrivateKey';\nconst RPC_URL = 'https://your-rpc-endpoint.com';\nconst account = privateKeyToAccount(PRIVATE_KEY);\nconst accountId = 0;\n\nconst walletClient = createWalletClient({\n  transport: http(RPC_URL),\n  account: account\n});\n\nasync function placeOrderExample() {\n  const exchange = new Exchange(walletClient, account.address, accountId);\n\n  const agent = await Agent.create(walletClient);\n\n  const approvalTx = await exchange.approveAgent(agent);\n  console.log('Agent approved:', approvalTx);\n  const tokenId = 0;\n  const marketId = 0;\n\n  const gasBalance = await exchange.getGasBalance();\n  console.log('gasBalance', gasBalance);\n\n  const payTreasuryRes = await exchange.payTreasury({\n    isCross: true,\n    marketId: 2,\n    usdAmount: 1\n  });\n  console.log(payTreasuryRes);\n\n  const marketAcc = MarketAccLib.pack(\n    account.address,\n    accountId,\n    tokenId,\n    marketId\n  );\n\n  const orderParams: PlaceOrderParams = {\n    marketAcc,\n    marketId,\n    side: Side.LONG,\n    size: BigInt('1000000000000000000'),\n    limitTick: Number(getTickAtInterest(interestRate, Side.LONG)),\n    tif: TimeInForce.GOOD_TIL_CANCELLED\n  };\n\n  const orderResult = await exchange.placeOrder(orderParams);\n\n  console.log('Order placed:', orderResult);\n\n  const bulkOrderResult = await exchange.bulkPlaceOrders({\n    marketAcc: '0x1eca053af93a7afaefcd2133a352f422c3c04903000001ffffff',\n    marketId: 2,\n    orders: {\n      sides: [0, 1],\n      sizes: [1000000000000000000n, 2000000000000000000n],\n      limitTicks: [69, 89],\n      tif: TimeInForce.GOOD_TIL_CANCELLED\n    },\n    cancels: {\n      ids: [],\n      isAll: false,\n      isStrict: false\n    }\n  });\n  const {\n    executeResponse: bulkOrderExecuteResponse,\n    result: { orders }\n  } = bulkOrderResult;\n  console.log('Bulk order result:', bulkOrderResult);\n\n  return orderResult;\n}\n\nplaceOrderExample()\n  .then((result) => console.log('Example completed successfully'))\n  .catch((error) => console.error('Error in example:', error));\n")),(0,r.kt)("p",null,"This example demonstrates the complete flow from initializing the Exchange class to successfully placing an order. The agent creation and approval steps are required before you can place orders on the platform."),(0,r.kt)("h2",{id:"order-management"},"Order Management"),(0,r.kt)("h3",{id:"get-tick-at-interest"},"Get Tick at Interest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"estimateTickForRate(rate: FixedX18, step: bigint, roundDown: boolean): bigint;\n")),(0,r.kt)("p",null,"Returns the tick price limit for a given interest rate and side."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rate"),": The interest rate"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"step"),": tickstep (in market.imData)")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const tick = estimateTickForRate(\n  FixedX18.fromNumber(interestRate),\n  BigInt(market.imData.tickStep),\n  true\n);\nconsole.log('Tick:', tick);\n")),(0,r.kt)("h3",{id:"pay-gas-to-treasury"},"Pay gas to treasury"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const gasBalance = await exchange.getGasBalance();\nconsole.log('gasBalance', gasBalance);\n\nconst payTreasuryRes = await exchange.payTreasury({\n  isCross: true,\n  marketId: 2,\n  usdAmount: 1\n});\nconsole.log(payTreasuryRes);\n")),(0,r.kt)("p",null,"Pay to treasury to increase gas balance so that we can send transaction for you"),(0,r.kt)("h3",{id:"place-order"},"Place Order"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async placeOrder(params: PlaceOrderParams): Promise<{\n  executeResponse: any;\n  result: { order: any };\n}>\n")),(0,r.kt)("p",null,"Places a new order on the exchange."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketAcc"),": Use MarketAccLib to pack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"side"),": Trade side (Enum: Side)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size"),": Order size as bigint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limitTick"),": The tick price limit"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tif"),": Time-in-force setting enum (GOOD_TIL_CANCELLED = 0, IMMEDIATE_OR_CANCEL = 1, FILL_OR_KILL = 2, POST_ONLY = 3)")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await exchange.placeOrder({\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  side: Side.LONG,\n  size: 100000000000000000000n, // 100 tokens with 18 decimals\n  limitTick: Number(getTickAtInterest(interestRate, Side.LONG)),\n  tif: TimeInForce.GOOD_TIL_CANCELLED\n});\n")),(0,r.kt)("h3",{id:"bulk-place-orders"},"Bulk Place Orders"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async bulkPlaceOrders(orderRequests: PlaceOrderParams[]): Promise<Array<{\n  executeResponse: any;\n  result: { order: any };\n}>>\n")),(0,r.kt)("p",null,"Places multiple orders in a single transaction."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderRequests"),": Array of PlaceOrderParams objects")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const bulkOrderParams: BulkPlaceOrderParams = {\n  marketAcc,\n  marketId,\n  side: Side.LONG,\n  sizes: [BigInt('1000000000000000000'), BigInt('2000000000000000000')],\n  limitTicks: [\n    Number(getTickAtInterest(interestRate, Side.LONG)),\n    Number(getTickAtInterest(interestRate, Side.LONG))\n  ],\n  tif: TimeInForce.GOOD_TIL_CANCELLED\n};\n\nconst results = await exchange.bulkPlaceOrders(bulkOrderParams);\n")),(0,r.kt)("h3",{id:"modify-order"},"Modify Order"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async modifyOrder(params: ModifyOrderParams): Promise<{\n  executeResponse: any;\n  result: { order: any };\n}>\n")),(0,r.kt)("p",null,"Modifies an existing order."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderId"),": ID of the order to modify"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketAcc"),": Hexadecimal market account identifier"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size"),": New order size as bigint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limitTick"),": New tick price limit"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tif"),": New time-in-force setting")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await exchange.modifyOrder({\n  orderId: '123456789',\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  size: 150000000000000000000n, // 150 tokens with 18 decimals\n  limitTick: 1050,\n  tif: TimeInForce.GOOD_TIL_CANCELLED\n});\n")),(0,r.kt)("h3",{id:"bulk-modify-orders"},"Bulk Modify Orders"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async bulkModifyOrder(orderRequests: ModifyOrderParams[]): Promise<Array<{\n  executeResponse: any;\n  result: { order: any };\n}>>\n")),(0,r.kt)("p",null,"Modifies multiple orders."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderRequests"),": Array of ModifyOrderParams objects")),(0,r.kt)("h3",{id:"cancel-orders"},"Cancel Orders"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async cancelOrders(params: CancelOrdersParams): Promise<{\n  executeResponse: any;\n  result: { cancelledOrders: any };\n}>\n")),(0,r.kt)("p",null,"Cancels one or more orders."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketAcc"),": Use MarketAccLib to get"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cancelAll"),": Boolean indicating whether to cancel all orders"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderIds"),": Array of order IDs to cancel (used when cancelAll is false)")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Cancel specific orders\nconst result = await exchange.cancelOrders({\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  cancelAll: false,\n  orderIds: ['123456789', '987654321']\n});\n\n// Cancel all orders\nconst result = await exchange.cancelOrders({\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  cancelAll: true,\n  orderIds: []\n});\n")),(0,r.kt)("h3",{id:"bulk-cancel-orders"},"Bulk Cancel Orders"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async bulkCancelOrders(cancelOrderRequests: CancelOrdersParams[]): Promise<Array<{\n  executeResponse: any;\n  result: { cancelledOrders: any };\n}>>\n")),(0,r.kt)("p",null,"Cancels multiple orders from different markets."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cancelOrderRequests"),": Array of CancelOrdersParams objects")),(0,r.kt)("h2",{id:"agent-management"},"Agent Management"),(0,r.kt)("h3",{id:"approve-agent"},"Approve Agent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async approveAgent(agent?: Agent): Promise<any>\n")),(0,r.kt)("p",null,"Approves an agent for transaction signing."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agent"),": Optional Agent instance. If not provided, a new agent will be created.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Approve a new agent\nconst agentApproval = await exchange.approveAgent();\n\n// Approve a specific agent\nimport { Agent } from 'pendle-sdk-boros';\nconst customAgent = await Agent.create(walletClient);\nconst agentApproval = await exchange.approveAgent(customAgent.agent);\n")),(0,r.kt)("h2",{id:"funds-management"},"Funds Management"),(0,r.kt)("h3",{id:"deposit"},"Deposit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async deposit(params: DepositParams): Promise<any>\n")),(0,r.kt)("p",null,"Deposits funds into the exchange."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userAddress"),": Address of the user"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"collateralAddress"),": Address of the collateral token"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Amount to deposit as bigint")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const receipt = await exchange.deposit({\n  userAddress: '0xYourWalletAddress',\n  collateralAddress: '0xTokenAddress',\n  amount: 1000000000000000000n // 1 token with 18 decimals\n});\n")),(0,r.kt)("h3",{id:"withdraw"},"Withdraw"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async withdraw(params: WithdrawParams): Promise<any>\n")),(0,r.kt)("p",null,"Withdraws funds from the exchange."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userAddress"),": Address of the user"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"collateralAddress"),": Address of the collateral token"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Amount to withdraw as bigint")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const receipt = await exchange.withdraw({\n  userAddress: '0xYourWalletAddress',\n  collateralAddress: '0xTokenAddress',\n  amount: 1000000000000000000n // 1 token with 18 decimals\n});\n")),(0,r.kt)("h3",{id:"cash-transfer"},"Cash Transfer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async cashTransfer(params: CashTransferParams): Promise<any>\n")),(0,r.kt)("p",null,"Transfers cash between markets."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": ID of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isDeposit"),": true if transferring from vault to marketId"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Amount to transfer as bigint")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await exchange.cashTransfer({\n  marketId: 1,\n  isDeposit: true,\n  amount: 1000000000000000000n // 1 token with 18 decimals\n});\n")),(0,r.kt)("h2",{id:"position-management"},"Position Management"),(0,r.kt)("h3",{id:"close-active-positions"},"Close Active Positions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async closeActivePositions(params: CloseActivePositionsParams): Promise<any>\n")),(0,r.kt)("p",null,"Closes active positions."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketAcc"),": Hexadecimal market account identifier"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),': Type of closing ("market" or "limit")'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size"),": Size to close as bigint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rate"),": Optional rate for limit closings")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Close with market order\nconst response = await exchange.closeActivePositions({\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  type: 'market',\n  size: 100000000000000000000n // 100 tokens with 18 decimals\n});\n\n// Close with limit order\nconst response = await exchange.closeActivePositions({\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  type: 'limit',\n  size: 100000000000000000000n,\n  rate: 0.05 // 5% rate\n});\n")),(0,r.kt)("h2",{id:"settings-management"},"Settings Management"),(0,r.kt)("h3",{id:"update-settings"},"Update Settings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async updateSettings(params: UpdateSettingsParams): Promise<any>\n")),(0,r.kt)("p",null,"Updates account settings."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketAcc"),": Hexadecimal market account identifier"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"leverage"),": Leverage value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signature"),": Signature as hexadecimal"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agent"),": Agent address as hexadecimal"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamp"),": Timestamp")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await exchange.updateSettings({\n  marketAcc: '0xMarketAccHex',\n  marketId: 0,\n  leverage: 5, // 5x leverage\n  signature: '0xSignatureHex',\n  agent: '0xAgentAddress',\n  timestamp: Math.floor(Date.now() / 1000)\n});\n")),(0,r.kt)("h2",{id:"data-retrieval"},"Data Retrieval"),(0,r.kt)("h3",{id:"get-markets"},"Get Markets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async getMarkets(params: GetMarketsParams): Promise<any>\n")),(0,r.kt)("p",null,"Retrieves market data."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skip"),": Optional number of records to skip"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": Optional limit on the number of records"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isWhitelisted"),": Optional filter for whitelisted markets")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const markets = await exchange.getMarkets({\n  skip: 0,\n  limit: 10,\n  isWhitelisted: true\n});\n")),(0,r.kt)("h3",{id:"get-order-book"},"Get Order Book"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async getOrderBook(params: GetOrderBookParams): Promise<any>\n")),(0,r.kt)("p",null,"Retrieves the order book for a market."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tickSize"),": Tick size (0.00001, 0.0001, 0.001, 0.01, or 0.1)")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const orderBook = await exchange.getOrderBook({\n  marketId: 0,\n  tickSize: 0.001\n});\n")),(0,r.kt)("h3",{id:"get-pnl-limit-orders"},"Get PnL Limit Orders"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async getPnlLimitOrders(params: GetPnlLimitOrdersParams): Promise<any>\n")),(0,r.kt)("p",null,"Retrieves PnL (Profit and Loss) limit orders."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skip"),": Optional number of records to skip"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": Optional limit on the number of records"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isActive"),": Optional filter for active orders"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy"),": Optional field to order by ('timeClosed', 'positionSize', 'avgFixedApr', 'avgUnderlyingApr', 'pnl')")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const pnlOrders = await exchange.getPnlLimitOrders({\n  skip: 0,\n  limit: 10,\n  isActive: true,\n  marketId: 0,\n  orderBy: 'pnl'\n});\n")),(0,r.kt)("h3",{id:"get-collaterals"},"Get Collaterals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async getCollaterals(): Promise<any>\n")),(0,r.kt)("p",null,"Retrieves collateral information for the current user and account."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const collaterals = await exchange.getCollaterals();\n")),(0,r.kt)("h3",{id:"get-active-positions"},"Get Active Positions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async getActivePositions(params: GetActivePositionsParams): Promise<any>\n")),(0,r.kt)("p",null,"Retrieves active positions."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Get all active positions\nconst allPositions = await exchange.getActivePositions({});\n\n// Get active positions for a specific market\nconst marketPositions = await exchange.getActivePositions({\n  marketId: 0\n});\n")),(0,r.kt)("h3",{id:"get-closed-positions"},"Get Closed Positions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async getClosedPositions(params: GetClosedPositionsParams): Promise<any>\n")),(0,r.kt)("p",null,"Retrieves closed positions."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marketId"),": Id of the market"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skip"),": Optional number of records to skip"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": Optional limit on the number of records"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy"),": Optional field to order by ('timeClosed', 'positionSize', 'avgFixedApr', 'avgUnderlyingApr', 'pnl')")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const closedPositions = await exchange.getClosedPositions({\n  marketId: 0,\n  skip: 0,\n  limit: 10,\n  orderBy: 'timeClosed'\n});\n")))}m.isMDXComponent=!0}}]);