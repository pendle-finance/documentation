"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[722],{2875:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Contracts/CustomTypes","title":"Custom Types","description":"Boros heavily uses Solidity user-defined value types for gas optimization and type safety. These types use bit-packing to minimize storage costs and provide efficient operations on the EVM.","source":"@site/docs/boros-dev-docs/Contracts/CustomTypes.mdx","sourceDirName":"Contracts","slug":"/Contracts/CustomTypes","permalink":"/cn/boros-dev/Contracts/CustomTypes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"borosSidebar","previous":{"title":"\ud83d\udcc8 Market","permalink":"/cn/boros-dev/Contracts/Market"},"next":{"title":"\ud83c\udf10 REST API","permalink":"/cn/boros-dev/Backend/REST API"}}');var s=r(4848),t=r(8453);const d={},o="Custom Types",c={},a=[{value:"Core Trading Types",id:"core-trading-types",level:2},{value:"Trade",id:"trade",level:3},{value:"Account Types",id:"account-types",level:2},{value:"Account",id:"account",level:3},{value:"MarketAcc",id:"marketacc",level:3},{value:"Order Book Types",id:"order-book-types",level:2},{value:"OrderId",id:"orderid",level:3},{value:"Side",id:"side",level:3},{value:"TimeInForce",id:"timeinforce",level:3},{value:"OrderStatus",id:"orderstatus",level:3},{value:"Market Types",id:"market-types",level:2},{value:"TokenId",id:"tokenid",level:3},{value:"MarketId",id:"marketid",level:3},{value:"AMMId",id:"ammid",level:3},{value:"Advanced Types",id:"advanced-types",level:2},{value:"FIndex",id:"findex",level:3},{value:"VMResult",id:"vmresult",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"custom-types",children:"Custom Types"})}),"\n",(0,s.jsx)(n.p,{children:"Boros heavily uses Solidity user-defined value types for gas optimization and type safety. These types use bit-packing to minimize storage costs and provide efficient operations on the EVM."}),"\n",(0,s.jsx)(n.h2,{id:"core-trading-types",children:"Core Trading Types"}),"\n",(0,s.jsx)(n.h3,{id:"trade",children:"Trade"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type Trade is uint256"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bit Packing"}),": ",(0,s.jsx)(n.code,{children:"signedSize(128) | signedCost(128)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// Creating trades\nTrade memory trade = TradeLib.from(signedSize, signedCost);\n\nSide side = trade.side();\nint128 size = trade.signedSize();\nint128 cost = trade.signedCost();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"account-types",children:"Account Types"}),"\n",(0,s.jsx)(n.h3,{id:"account",children:"Account"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type Account is bytes21"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bit Packing"}),": ",(0,s.jsx)(n.code,{children:"address(160) | accountId(8)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// Creating accounts\nAccount mainAcc = AccountLib.from(userAddress, 0);  // Main account\nAccount subAcc = AccountLib.from(userAddress, 1);   // Sub-account 1\nAccount ammAcc = userAddress.toAMM();               // AMM account 255\n\n// Parsing accounts\naddress root = account.root();         // Extract root address\nuint8 accountId = account.accountId(); // Extract account ID\n\n// Special account types\nbool isMain = account.isMain();       // accountId == 0\nbool isAMM = account.isAMM();         // accountId == 255\n"})}),"\n",(0,s.jsx)(n.h3,{id:"marketacc",children:"MarketAcc"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type MarketAcc is bytes26"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bit Packing"}),": ",(0,s.jsx)(n.code,{children:"address(160) | accountId(8) | tokenId(16) | marketId(24)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// Creating market accounts\nMarketAcc crossAcc = account.toCross(tokenId);                 // Cross-margin\nMarketAcc isolatedAcc = account.toIsolated(tokenId, marketId); // Isolated\n\n// Parsing market accounts\naddress root = crossAcc.root();\nAccount account = crossAcc.account();\nTokenId tokenId = crossAcc.tokenId();\nMarketId marketId = crossAcc.marketId();\n\n// Cross vs isolated margin\nbool isCross = isolatedAcc.isCross();\nMarketAcc crossAcc = isolatedAcc.toCross();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"order-book-types",children:"Order Book Types"}),"\n",(0,s.jsx)(n.h3,{id:"orderid",children:"OrderId"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type OrderId is uint64"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bit Packing"}),": ",(0,s.jsx)(n.code,{children:"initialized(1) | reserved(6) | side(1) | encodedTick(16) | orderIndex(40)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// Creating order IDs (done internally by order book)\nOrderId orderId = OrderIdLib.from(Side.LONG, tickIndex, orderIndex);\n\n// Parsing order IDs\nSide side = orderId.side();\nint16 tick = orderId.tickIndex();\nuint40 index = orderId.orderIndex();\n\n// Priority comparison (lower unwrapped value = higher priority)\nbool higherPriority = orderId1 < orderId2;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"side",children:"Side"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"enum Side { LONG, SHORT }"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Side opposite = side.opposite();          // LONG \u2194 SHORT\nbool topDown = side.sweepTickTopDown();   // LONG: true, SHORT: false\nint16 endTick = side.endTick();          // Boundary tick values\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"timeinforce",children:"TimeInForce"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"enum TimeInForce { GTC, IOC, FOK, ALO, SOFT_ALO }"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GTC (Good Till Cancel)"}),": Standard limit order that remains on the order book until fully filled or manually canceled"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IOC (Immediate or Cancel)"}),": Executes against available liquidity immediately, cancels any unfilled portion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FOK (Fill or Kill)"}),": Must fill entire order size immediately or the transaction reverts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ALO (Add Liquidity Only)"}),": Post-only order that adds liquidity to the book, transaction reverts if it would match existing orders"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SOFT_ALO"}),": Post-only order similar to ALO, but skips matching without reverting the transaction"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"orderstatus",children:"OrderStatus"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"enum OrderStatus { NOT_EXIST, OPEN, PENDING_SETTLE, PURGED }"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NOT_EXIST"}),": Order has never been placed or has been cancelled"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OPEN"}),": Active order in the order book, available for matching against incoming orders"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PENDING_SETTLE"}),": Order has been filled"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PURGED"}),": Order was purged because rate is ",(0,s.jsx)(n.a,{href:"/cn/boros-dev/Mechanics/OrderBook#restrictions",children:"out of bound"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"market-types",children:"Market Types"}),"\n",(0,s.jsx)(n.h3,{id:"tokenid",children:"TokenId"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type TokenId is uint16"})]}),"\n",(0,s.jsx)(n.p,{children:"Unique identifier for collateral tokens supported by the protocol."}),"\n",(0,s.jsx)(n.h3,{id:"marketid",children:"MarketId"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type MarketId is uint24"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Special Value"}),": The value ",(0,s.jsx)(n.code,{children:"type(uint24).max"})," (16,777,215) is reserved as ",(0,s.jsx)(n.code,{children:"MarketIdLib.CROSS"})," to indicate cross-margin mode, where collateral is shared across all markets within the same collateral zone."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// Cross-margin constant\nMarketId crossMargin = MarketIdLib.CROSS;  // type(uint24).max\n\n// Regular market IDs for isolated margin\nMarketId market1 = MarketId.wrap(1);       // Isolated margin for market 1\nMarketId market2 = MarketId.wrap(2);       // Isolated margin for market 2\n\n// Checking margin mode\nbool isCross = marketId.isCross();         // true if marketId == CROSS\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ammid",children:"AMMId"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type AMMId is uint24"})]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-types",children:"Advanced Types"}),"\n",(0,s.jsx)(n.h3,{id:"findex",children:"FIndex"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type FIndex is bytes26"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bit Packing"}),": ",(0,s.jsx)(n.code,{children:"fTime(32) | floatingIndex(112) | feeIndex(64)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"FIndex fIndex = FIndexLib.from(fTime, floatingIndex, feeIndex);\n\n// Parsing components\nuint32 fTime = fIndex.fTime();                  // Funding time\nint112 floatingIndex = fIndex.floatingIndex();  // Floating rate index\nuint64 feeIndex = fIndex.feeIndex();            // Fee accumulator\n\n// Comparison and checks\nbool isZero = fIndex.isZero();\nbool same = fIndex1 == fIndex2;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vmresult",children:"VMResult"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": ",(0,s.jsx)(n.code,{children:"type VMResult is uint256"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bit Packing"}),": ",(0,s.jsx)(n.code,{children:"value(128) | margin(128)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"VMResult result = VMResultLib.from(positionValue, marginRequired);\n\n(int128 value, uint128 margin) = result.unpack();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var i=r(6540);const s={},t=i.createContext(s);function d(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);