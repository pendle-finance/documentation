"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[365],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(n),p=a,k=m["".concat(s,".").concat(p)]||m[p]||c[p]||i;return n?r.createElement(k,l(l({ref:t},d),{},{components:n})):r.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},l="Router Integration Guide",o={unversionedId:"Boros/Contracts/Router",id:"Boros/Contracts/Router",title:"Router Integration Guide",description:"The Router contract serves as the main entry point for all user interactions with Boros.",source:"@site/docs/Boros/Contracts/Router.md",sourceDirName:"Boros/Contracts",slug:"/Boros/Contracts/Router",permalink:"/cn/Boros/Contracts/Router",draft:!1,tags:[],version:"current",frontMatter:{}},s={},u=[{value:"Account Authorization",id:"account-authorization",level:2},{value:"Vault Operations",id:"vault-operations",level:2},{value:"Deposit cash",id:"deposit-cash",level:3},{value:"Withdraw cash",id:"withdraw-cash",level:3},{value:"Cash Transfer",id:"cash-transfer",level:3},{value:"Market Entry and Exit",id:"market-entry-and-exit",level:2},{value:"Enter Markets",id:"enter-markets",level:3},{value:"Exit Markets",id:"exit-markets",level:3},{value:"Order Book Trading",id:"order-book-trading",level:2},{value:"Place Single Order",id:"place-single-order",level:3},{value:"Bulk Orders",id:"bulk-orders",level:3},{value:"Cancel Orders",id:"cancel-orders",level:3},{value:"AMM",id:"amm",level:2},{value:"Add Liquidity Dual",id:"add-liquidity-dual",level:3},{value:"Add Liquidity Single Cash",id:"add-liquidity-single-cash",level:3},{value:"Remove Liquidity Dual",id:"remove-liquidity-dual",level:3},{value:"Remove Liquidity Single Cash",id:"remove-liquidity-single-cash",level:3},{value:"Simulation",id:"simulation",level:2}],d={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"router-integration-guide"},"Router Integration Guide"),(0,a.kt)("p",null,"The Router contract serves as the main entry point for all user interactions with Boros."),(0,a.kt)("p",null,"Router follows a modular architecture:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"AuthModule"),": agent authentication and delegated trading (irrelevant for external parties)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"AMMModule"),": AMM-specific operations (add/remove liquidity, swaps)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"TradeModule"),": core trading operations (enter/exit markets, place/cancel orders, cash transfer)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"MiscModule"),": utility functions")),(0,a.kt)("h2",{id:"account-authorization"},"Account Authorization"),(0,a.kt)("p",null,"Currently, you can only operate on the ",(0,a.kt)("strong",{parentName:"p"},"main account (subaccount 0)"),". Support for other subaccounts may be added in future versions."),(0,a.kt)("p",null,"Most Router functions require two key parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"bool cross")),": Specifies margin mode (true = cross-margin, false = isolated-margin)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"MarketId marketId")),": The market identifier")),(0,a.kt)("p",null,"These parameters construct the ",(0,a.kt)("inlineCode",{parentName:"p"},"MarketAcc")," (Market Account) identifier:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Cross-margin account (can trade multiple markets)\nbool cross = true;\nMarketId marketId = MarketIdLib.CROSS;  // Special cross-margin value\n\n// Isolated-margin account (single market)\nbool cross = false;\nMarketId marketId = MarketId.wrap(12345);   // Specific market ID\n")),(0,a.kt)("h2",{id:"vault-operations"},"Vault Operations"),(0,a.kt)("p",null,"Vault operations manage the underlying collateral tokens."),(0,a.kt)("h3",{id:"deposit-cash"},"Deposit cash"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"router.vaultDeposit(\n    0,          // accountId (0 = main account)\n    tokenId,    // TokenId of collateral token\n    marketId,   // marketId (2^24-1 for cross account)\n    1 ether     // Raw token amount\n);\n")),(0,a.kt)("h3",{id:"withdraw-cash"},"Withdraw cash"),(0,a.kt)("p",null,"Withdrawals follow a two-step process: request \u2192 cooldown period \u2192 finalize."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Checking Withdrawal Status"),": You can monitor your withdrawal request status and cooldown period through MarketHub's ",(0,a.kt)("a",{parentName:"p",href:"/cn/Boros/Contracts/MarketHub#getuserwithdrawalstatus"},"getUserWithdrawalStatus")," function. This returns detailed information including the pending amount and exact timestamp when withdrawal becomes available."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Step 1: Request withdrawal\nrouter.requestVaultWithdrawal(tokenId, 1 ether);\n\n// Step 2: After cooldown period, finalize withdrawal on MarketHub\nIMarketHub(marketHub).finalizeVaultWithdrawal(\n    address(this),  // root address\n    tokenId         // TokenId of collateral token\n);\n\n// Can cancel pending withdrawal\nrouter.cancelVaultWithdrawal(tokenId);\n")),(0,a.kt)("h3",{id:"cash-transfer"},"Cash Transfer"),(0,a.kt)("p",null,"Transfer cash between cross-margin and isolated-margin accounts using the same collateral token."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Transfer from cross-margin to isolated-margin account\nCashTransferReq memory req = CashTransferReq({\n    marketId: marketId,        // Target isolated market\n    signedAmount: 1000e18      // Positive = from cross to isolated\n});\nrouter.cashTransfer(req);\n\n// Transfer from isolated-margin back to cross-margin account\nreq.signedAmount = -500e18;    // Negative = from isolated to cross\nrouter.cashTransfer(req);\n")),(0,a.kt)("h2",{id:"market-entry-and-exit"},"Market Entry and Exit"),(0,a.kt)("h3",{id:"enter-markets"},"Enter Markets"),(0,a.kt)("p",null,"Users must enter markets before trading."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"MarketId[] memory marketIds = new MarketId[](2);\nmarketIds[0] = marketId0;\nmarketIds[1] = marketId1;\n\n// Enter multiple markets\nEnterExitMarketsReq memory req = EnterExitMarketsReq({\n    cross: true,\n    isEnter: true,\n    marketIds: marketIds\n});\nrouter.enterExitMarkets(req);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Market Entry Limits"),": Each account can enter a maximum of ",(0,a.kt)("strong",{parentName:"p"},"10 markets")," simultaneously. Exceeding this limit will cause transactions to revert."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Market Entrance Fees"),": A one-time entrance fee is charged when you first interact with any market:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BTC markets"),": 0.000008 BTC (\u2248$1 USD)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ETH markets"),": 0.00027 ETH (\u2248$1 USD)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Minimum Cash Requirements"),": You must maintain minimum cash balances in your account to participate in markets. Check the ",(0,a.kt)("a",{parentName:"p",href:"/cn/Boros/Contracts/MarketHub#getcashfeedata"},"specific requirements")," for cross vs isolated margin modes."),(0,a.kt)("h3",{id:"exit-markets"},"Exit Markets"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Exit Requirements"),": To exit a market, you must:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Close all positions (zero position size)"),(0,a.kt)("li",{parentName:"ul"},"Cancel all open orders"),(0,a.kt)("li",{parentName:"ul"},"Have no pending settlements")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Market Maturity"),": When markets reach maturity, you should exit them to free up market slots."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"MarketId[] memory marketIds = new MarketId[](2);\nmarketIds[0] = marketId0;\nmarketIds[1] = marketId1;\n\n// Exit multiple markets\nEnterExitMarketsReq memory req = EnterExitMarketsReq({\n    cross: true,\n    isEnter: false,\n    marketIds: marketIds\n});\nrouter.enterExitMarkets(req);\n")),(0,a.kt)("h2",{id:"order-book-trading"},"Order Book Trading"),(0,a.kt)("h3",{id:"place-single-order"},"Place Single Order"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Compound Function"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"placeSingleOrder")," is a compound function that can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Automatically enter markets if ",(0,a.kt)("inlineCode",{parentName:"li"},"enterMarket")," is true"),(0,a.kt)("li",{parentName:"ul"},"Cancel existing orders via ",(0,a.kt)("inlineCode",{parentName:"li"},"idToStrictCancel")),(0,a.kt)("li",{parentName:"ul"},"Place the new order"),(0,a.kt)("li",{parentName:"ul"},"Transfer cash for isolated margin positions"),(0,a.kt)("li",{parentName:"ul"},"Automatically exit markets if ",(0,a.kt)("inlineCode",{parentName:"li"},"exitMarket")," is true")),(0,a.kt)("p",null,"This reduces the number of transactions needed for complex operations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Basic limit order\nSingleOrderReq memory req = SingleOrderReq({\n    order: OrderReq({\n        cross: true,                    // Cross-margin\n        marketId: marketId,\n        ammId: AMMIdLib.ZERO,           // Order book only (not AMM)\n        side: Side.LONG,                // Buy interest rate swap\n        tif: TimeInForce.GTC,           // Good till cancelled\n        size: 1000e18,                  // Position size\n        tick: 125                       // Price tick (\u22485% rate)\n    }),\n    enterMarket: false,                 // Don't auto-enter market\n    idToStrictCancel: OrderIdLib.ZERO,  // No order to cancel\n    exitMarket: false,                  // Don't auto-exit\n    isolated_cashIn: 0,                 // For isolated margin only\n    isolated_cashTransferAll: false,\n    desiredMatchRate: 0                 // Accept any match rate\n});\n\nrouter.placeSingleOrder(req);\n")),(0,a.kt)("h3",{id:"bulk-orders"},"Bulk Orders"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Optimal for Market Makers"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"bulkOrders")," is designed for professional market makers and offers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Place multiple orders in a single transaction"),(0,a.kt)("li",{parentName:"ul"},"Operate across multiple markets simultaneously"),(0,a.kt)("li",{parentName:"ul"},"Cancel existing orders before placing new ones"),(0,a.kt)("li",{parentName:"ul"},"Significant gas savings compared to individual order transactions")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cancel Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isAll: true")," - Cancel all existing orders in the market before placing new orders"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isAll: false")," - Cancel only the specific order IDs listed in the ",(0,a.kt)("inlineCode",{parentName:"li"},"ids")," array"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isStrict: true")," - Transaction reverts if any specified order ID doesn't exist"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isStrict: false")," - Silently skip non-existent order IDs without reverting")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Place multiple orders across different markets\nBulkOrder[] memory bulks = new BulkOrder[](2);\n\nuint256[] memory sizes0 = new uint256[](2);\nsizes0[0] = 500e18;\nsizes0[1] = 300e18;\nint16[] memory limitTicks0 = new int16[](2);\nlimitTicks0[0] = 120;\nlimitTicks0[1] = 125;\n\nbulks[0] = BulkOrder({\n    marketId: marketId1,\n    orders: LongShort({\n        tif: TimeInForce.GTC,\n        side: Side.LONG,\n        sizes: sizes0,\n        limitTicks: limitTicks0\n    }),\n    cancelData: CancelData({\n        ids: new OrderId[](0),\n        isAll: false,\n        isStrict: false\n    })\n});\n\nuint256[] memory sizes1 = new uint256[](1);\nsizes1[0] = 1900e18;\nint16[] memory limitTicks1 = new int16[](1);\nlimitTicks1[0] = 140;\n\nbulks[1] = BulkOrder({\n    marketId: marketId2,\n    orders: LongShort({\n        tif: TimeInForce.GTC,\n        side: Side.SHORT,\n        sizes: [1000e18],\n        limitTicks: [140]\n    }),\n    cancelData: CancelData({\n        ids: new OrderId[](0),\n        isAll: false,\n        isStrict: false\n    })\n});\n\nint128[] memory desiredMatchRates = new int128[](2);\ndesiredMatchRates[0] = 0;\ndesiredMatchRates[1] = 0;\n\nBulkOrdersReq memory req = BulkOrdersReq({\n    cross: true,\n    bulks: bulks,\n    desiredMatchRates: desiredMatchRates\n});\n\nBulkOrderResult[] memory results = router.bulkOrders(req);\n")),(0,a.kt)("h3",{id:"cancel-orders"},"Cancel Orders"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"OrderId[] memory orderIds = new OrderId[](2);\norderIds[0] = orderId1;\norderIds[1] = orderId2;\n\n// Cancel specific orders\nBulkCancels memory cancels = BulkCancels({\n    cross: true,\n    marketId: marketId,\n    cancelAll: false,\n    orderIds: orderIds\n});\nrouter.bulkCancels(cancels);\n\n// Cancel all orders in a market\ncancels.cancelAll = true;\ncancels.orderIds = new OrderId[](0);\nrouter.bulkCancels(cancels);\n")),(0,a.kt)("h2",{id:"amm"},"AMM"),(0,a.kt)("h3",{id:"add-liquidity-dual"},"Add Liquidity Dual"),(0,a.kt)("p",null,"Adding liquidity requires providing both cash and position sizes in proportion to the AMM's current state. The AMM automatically calculates the required ratio based on its current cash-to-position balance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"AddLiquidityDualToAmmReq memory req = AddLiquidityDualToAmmReq({\n    cross: true,\n    ammId: ammId,\n    maxCashIn: 10000e18,\n    exactSizeIn: 1000e18,\n    minLpOut: 950e18\n});\n\n(uint256 lpOut, int256 cashIn, uint256 fee) = router.addLiquidityDualToAmm(req);\n")),(0,a.kt)("h3",{id:"add-liquidity-single-cash"},"Add Liquidity Single Cash"),(0,a.kt)("p",null,"This function simplifies liquidity provision by:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Using part of your cash to trade for the required position size"),(0,a.kt)("li",{parentName:"ol"},"Adding the remaining cash + acquired position as dual liquidity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"AddLiquiditySingleCashToAmmReq memory req = AddLiquiditySingleCashToAmmReq({\n    cross: true,\n    ammId: ammId,\n    enterMarket: true,\n    netCashIn: 5000e18,\n    minLpOut: 450e18\n});\n\n(uint256 lpOut, int256 cashUsed, uint256 fee, int256 swapSize) =\n    router.addLiquiditySingleCashToAmm(req);\n")),(0,a.kt)("h3",{id:"remove-liquidity-dual"},"Remove Liquidity Dual"),(0,a.kt)("p",null,"Removes liquidity and receives both cash and position sizes proportionally. You specify the LP tokens to burn and receive the underlying assets based on the AMM's current composition."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Remove liquidity and receive both cash and size\nRemoveLiquidityDualFromAmmReq memory req = RemoveLiquidityDualFromAmmReq({\n    cross: true,\n    ammId: ammId,\n    lpToRemove: 1000e18,\n    minCashOut: 4500e18,\n    minSizeOut: -1200e18,\n    maxSizeOut: -800e18\n});\n\n(int256 cashOut, int256 sizeOut, uint256 fee) = router.removeLiquidityDualFromAmm(req);\n")),(0,a.kt)("h3",{id:"remove-liquidity-single-cash"},"Remove Liquidity Single Cash"),(0,a.kt)("p",null,"Removes liquidity and converts everything to cash by:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Withdrawing proportional cash and position sizes"),(0,a.kt)("li",{parentName:"ol"},"Trading the position sizes back to cash"),(0,a.kt)("li",{parentName:"ol"},"Returning the total cash amount to you")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"RemoveLiquiditySingleCashFromAmmReq memory req = RemoveLiquiditySingleCashFromAmmReq({\n    cross: true,\n    ammId: ammId,\n    lpToRemove: 500e18,\n    minCashOut: 4800e18\n});\n\n(int256 cashOut, uint256 fee, int256 swapSize) =\n    router.removeLiquiditySingleCashFromAmm(req);\n")),(0,a.kt)("h2",{id:"simulation"},"Simulation"),(0,a.kt)("p",null,"The MiscModule provides simulation capabilities."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// Simulate multiple operations\nSimulateData[] memory simulations = new SimulateData[](2);\n\nsimulations[0] = SimulateData({\n    account: mainAccount,\n    target: address(router),\n    data: abi.encodeCall(ITradeModule.placeSingleOrder, orderRequest)\n});\n\nsimulations[1] = SimulateData({\n    account: mainAccount,\n    target: address(router),\n    data: abi.encodeCall(IAMMModule.swapWithAmm, swapRequest)\n});\n\n// Get simulation results without changing state\n(bytes[] memory results, uint256[] memory gasUsed) = router.batchSimulate(simulations);\n")))}c.isMDXComponent=!0}}]);