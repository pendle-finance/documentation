"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[6995],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,k=c["".concat(o,".").concat(u)]||c[u]||d[u]||s;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6280:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const s={hide_table_of_contents:!0},i="Pendle Market Smart Contracts",l={unversionedId:"Developers/Contracts/PendleMarket",id:"Developers/Contracts/PendleMarket",title:"Pendle Market Smart Contracts",description:"Introduction",source:"@site/docs/Developers/Contracts/PendleMarket.md",sourceDirName:"Developers/Contracts",slug:"/Developers/Contracts/PendleMarket",permalink:"/Developers/Contracts/PendleMarket",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"myAutogeneratedSidebar",previous:{title:"Yield Tokenization Smart Contracts",permalink:"/Developers/Contracts/YieldTokenization"},next:{title:"Pendle Router Overview",permalink:"/Developers/Contracts/PendleRouter/PendleRouterOverview"}},o={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Pendle AMM Overview",id:"pendle-amm-overview",level:2},{value:"Market Parameters",id:"market-parameters",level:2},{value:"Core Logic",id:"core-logic",level:2},{value:"<code>readState</code>",id:"readstate",level:3},{value:"<code>mint</code>",id:"mint",level:3},{value:"<code>burn</code>",id:"burn",level:3},{value:"<code>swapExactPtForSy</code>",id:"swapexactptforsy",level:3},{value:"<code>swapSyForExactPt</code>",id:"swapsyforexactpt",level:3},{value:"<code>redeemRewards</code>",id:"redeemrewards",level:3},{value:"Integration Example",id:"integration-example",level:2},{value:"Basic Swap",id:"basic-swap",level:3},{value:"Basic Mint",id:"basic-mint",level:3},{value:"Flash Swap",id:"flash-swap",level:2},{value:"How It Works",id:"how-it-works",level:3},{value:"Flash Swap Example",id:"flash-swap-example",level:3},{value:"Interface",id:"interface",level:3},{value:"Oracle",id:"oracle",level:2},{value:"How It Works",id:"how-it-works-1",level:3},{value:"Integration Guide",id:"integration-guide",level:3},{value:"FAQ",id:"faq",level:2},{value:"Why is there no swapExactSy function?",id:"why-is-there-no-swapexactsy-function",level:3},{value:"How can I trade YT tokens when the Market only contains PT and SY?",id:"how-can-i-trade-yt-tokens-when-the-market-only-contains-pt-and-sy",level:3},{value:"Why can\u2019t I swap PT after expiry?",id:"why-cant-i-swap-pt-after-expiry",level:3},{value:"Should I use the Router or interact with the Market directly?",id:"should-i-use-the-router-or-interact-with-the-market-directly",level:3}],m={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pendle-market-smart-contracts"},"Pendle Market Smart Contracts"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Pendle Market is a specialized Automated Market Maker (AMM) pool designed for trading yields. Each market enables efficient trading between:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Principal Tokens (PT)")," - Tokens that represent the principal component of yield-bearing assets"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Standardized Yield (SY)")," - Wrapped yield-bearing assets that standardize yield mechanics")),(0,r.kt)("h2",{id:"pendle-amm-overview"},"Pendle AMM Overview"),(0,r.kt)("p",null,"Traditional AMMs like Uniswap use constant product formulas (",(0,r.kt)("inlineCode",{parentName:"p"},"x \xd7 y = k"),") that do not account for the unique properties of fixed-yield assets. Pendle Markets implement a sophisticated time-aware AMM based on Notional Finance's AMM model that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Recognizes time decay"),": PT prices naturally converge to 1 as they approach expiry"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Optimizes for yield trading"),": Pricing curves are tailored for interest rate movements"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Maximizes capital efficiency"),": Concentrates liquidity around expected yield ranges"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Minimal Impermanent Loss (IL)"),": Pendle\u2019s AMM accounts for PT\u2019s natural price appreciation by shifting the AMM curve to push PT price towards its underlying value as time passes, mitigating time-dependent IL (No IL at maturity).")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Deep Dive"),": For complete mathematical analysis and comparisons, see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-v2-resources/blob/main/whitepapers/V2_AMM.pdf"},"Pendle V2 AMM Whitepaper"))),(0,r.kt)("h2",{id:"market-parameters"},"Market Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Expiry"),": The timestamp when PT tokens can be redeemed 1:1 for underlying assets - drives PT price convergence to 1 as expiry approaches.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Scalar Root"),": Controls the trade-off between capital efficiency and tradeable interest rate range - higher values create tighter, more efficient markets.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Initial Anchor"),": Sets the interest rate around which trading is most capital efficient at market launch - centers liquidity around expected yield levels.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fee Rate Root"),": Dynamic fees based on interest rate impact rather than token amounts - larger market movements incur proportionally higher fees."))),(0,r.kt)("h2",{id:"core-logic"},"Core Logic"),(0,r.kt)("h3",{id:"readstate"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/v3/PendleMarketV3.sol#L272-L292"},(0,r.kt)("inlineCode",{parentName:"a"},"readState"))),(0,r.kt)("p",null,"Returns the current market state and pricing metadata. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct MarketState {\n    int256 totalPt; // total PT in the market\n    int256 totalSy; // total SY in the market\n    int256 totalLp; // total LP minted\n    address treasury; // treasury address to receive protocol fees\n    int256 scalarRoot; // variable to control the capital efficiency of the market\n    uint256 expiry; // timestamp when market expires\n    /// fee data ///\n    uint256 lnFeeRateRoot; // fee rate in ln\n    uint256 reserveFeePercent; // reserve fee in base 100\n    /// last trade data ///\n    uint256 lastLnImpliedRate; // last ln(implied rate) observed\n}\n /**\n * @notice read the state of the market from storage into memory for gas-efficient manipulation\n */\nfunction readState(address router) external view returns (MarketState memory market);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"feeRateRoot")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"lastImpliedRate")," are stored/returned as natural-log values in fixed-point form. "),(0,r.kt)("li",{parentName:"ul"},"The router parameter allows the function to reflect router-specific settings (e.g., fee discounts if applicable).")),(0,r.kt)("h3",{id:"mint"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/v3/PendleMarketV3.sol#L85-L125"},(0,r.kt)("inlineCode",{parentName:"a"},"mint"))),(0,r.kt)("p",null,"Adds liquidity using PT & SY; mints LP shares proportional to the amounts used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n * @notice PendleMarket allows users to provide in PT & SY in exchange for LPs, which\n * will grant LP holders more exchange fee over time\n * @dev will mint as much LP as possible such that the corresponding SY and PT used do\n * not exceed `netSyDesired` and `netPtDesired`, respectively\n * @dev PT and SY should be transferred to this contract prior to calling\n * @dev will revert if PT is expired\n */\nfunction mint(\n    address receiver,\n    uint256 netSyDesired,\n    uint256 netPtDesired\n) external returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Caller must transfer PT and SY to the Market before calling. The function mints as many LPs as possible without exceeding ",(0,r.kt)("inlineCode",{parentName:"li"},"netSyDesired"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"netPtDesired"),".")),(0,r.kt)("h3",{id:"burn"},(0,r.kt)("a",{parentName:"h3",href:"http://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/v3/PendleMarketV3.sol#L127-L148"},(0,r.kt)("inlineCode",{parentName:"a"},"burn"))),(0,r.kt)("p",null,"Removes liquidity by burning LP shares for pro-rata SY and PT. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n * @notice LP Holders can burn their LP to receive back SY & PT proportionally\n * to their share of the market\n */\nfunction burn(\n    address receiverSy,\n    address receiverPt,\n    uint256 netLpToBurn\n) external returns (uint256 netSyOut, uint256 netPtOut);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," caller must transfer LP to the Market before calling."),(0,r.kt)("h3",{id:"swapexactptforsy"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/v3/PendleMarketV3.sol#L150-L184"},(0,r.kt)("inlineCode",{parentName:"a"},"swapExactPtForSy"))),(0,r.kt)("p",null,"Swaps an exact amount of PT for SY. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n * @notice Pendle Market allows swaps between PT & SY it is holding. This function\n * aims to swap an exact amount of PT to SY.\n * @dev steps working of this contract\n     - The outcome amount of SY will be precomputed by MarketMathLib\n    - Release the calculated amount of SY to receiver\n    - Callback to msg.sender if data.length > 0\n    - Ensure exactPtIn amount of PT has been transferred to this address\n    * @dev will revert if PT is expired\n    * @param data bytes data to be sent in the callback (if any)\n    */\nfunction swapExactPtForSy(\n    address receiver,\n    uint256 exactPtIn,\n    bytes calldata data\n) external nonReentrant notExpired returns (uint256 netSyOut, uint256 netSyFee);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," caller must transfer PT to the Market first; the Market then sends out the computed SY and (optionally) invokes a callback if data is non-empty. For a deeper understanding of the math behind, refer to the ",(0,r.kt)("a",{parentName:"p",href:"V2_AMM.pdf"},(0,r.kt)("inlineCode",{parentName:"a"},"Pendle V2 AMM Whitepaper"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/ba53685767bc16e070136b9dbfe02a5dd6258c61/contracts/core/Market/MarketMathCore.sol#L193-L217"},(0,r.kt)("inlineCode",{parentName:"a"},"MarketMathCore Contract")),"."),(0,r.kt)("h3",{id:"swapsyforexactpt"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/v3/PendleMarketV3.sol#L186-L220"},(0,r.kt)("inlineCode",{parentName:"a"},"swapSyForExactPt"))),(0,r.kt)("p",null,"Swaps SY for an exact amount of PT. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n * @notice Pendle Market allows swaps between PT & SY it is holding. This function\n * aims to swap SY for an exact amount of PT.\n * @dev steps working of this function\n     - The exact outcome amount of PT will be transferred to receiver\n    - Callback to msg.sender if data.length > 0\n    - Ensure the calculated required amount of SY is transferred to this address\n    * @dev will revert if PT is expired\n    * @param data bytes data to be sent in the callback (if any)\n    */\nfunction swapSyForExactPt(\n    address receiver,\n    uint256 exactPtOut,\n    bytes calldata data\n) external returns (uint256 netSyIn, uint256 netSyFee);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," the Market sends out exactPtOut to receiver, optionally callbacks msg.sender, and then enforces that the required SY has been provided (typically via ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer")," in the callback/Router). For a deeper understanding of the math behind, refer to the ",(0,r.kt)("a",{parentName:"p",href:"V2_AMM.pdf"},(0,r.kt)("inlineCode",{parentName:"a"},"Pendle V2 AMM Whitepaper"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/ba53685767bc16e070136b9dbfe02a5dd6258c61/contracts/core/Market/MarketMathCore.sol#L193-L217"},(0,r.kt)("inlineCode",{parentName:"a"},"MarketMathCore Contract")),"."),(0,r.kt)("h3",{id:"redeemrewards"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/v3/PendleMarketV3.sol#L231-L237"},(0,r.kt)("inlineCode",{parentName:"a"},"redeemRewards"))),(0,r.kt)("p",null,"Claims accumulated swap fees/protocol rewards for user (in the order of ",(0,r.kt)("inlineCode",{parentName:"p"},"getRewardTokens()"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n * @notice redeems the user's reward\n * @return amount of reward token redeemed, in the same order as `getRewardTokens()`\n */\nfunction redeemRewards(address user) external returns (uint256[] memory);\n")),(0,r.kt)("h2",{id:"integration-example"},"Integration Example"),(0,r.kt)("h3",{id:"basic-swap"},"Basic Swap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// Transfer SY to market first\nsy.transfer(address(market), syAmount);\n\n// Execute swap\n(uint256 ptOut,) = market.swapExactSyForPt(\n    msg.sender,\n    syAmount,\n    ""\n);\n')),(0,r.kt)("h3",{id:"basic-mint"},"Basic Mint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"// Transfer tokens first\nsy.transfer(address(market), syAmount);\npt.transfer(address(market), ptAmount);\n\n// Mint LP tokens\n(uint256 lpOut,,) = market.mint(\n    msg.sender,\n    syAmount,\n    ptAmount\n);\n")),(0,r.kt)("h2",{id:"flash-swap"},"Flash Swap"),(0,r.kt)("p",null,"Similar to Uniswap V2, ",(0,r.kt)("strong",{parentName:"p"},"all Pendle swaps are actually flash swaps"),". The Market sends output tokens to the receiver first, then enforces that sufficient input tokens have been received by the end of the transaction. This facilitates advanced use cases like arbitrage, liquidation, and in Pendle specifically, YT trading."),(0,r.kt)("h3",{id:"how-it-works"},"How It Works"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Market sends output tokens")," to receiver immediately"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Callback executed")," (if data provided) - this is where you implement your logic. You can use the received tokens for arbitrage, liquidation, or other strategies, but you must ensure you transfer the required input tokens back to the Market before the callback ends."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Market checks input tokens")," - verifies required tokens were transferred during the transaction")),(0,r.kt)("p",null,"Because Ethereum transactions are atomic, the entire swap reverts if the Market doesn't receive enough input tokens."),(0,r.kt)("h3",{id:"flash-swap-example"},"Flash Swap Example"),(0,r.kt)("admonition",{title:"Example code only",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The snippets below are simplified for illustration and ",(0,r.kt)("strong",{parentName:"p"},"are not audited"),".",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Do not")," use them in production or with real funds. If you adapt any example,\nconduct a full review, add comprehensive tests, and obtain an independent ",(0,r.kt)("strong",{parentName:"p"},"security audit"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"contract FlashSwapExample is IPMarketSwapCallback {\n    IPendleMarket public market;\n    \n    function flashSwap(uint256 ptAmount) external {\n        // Market will send SY first, then callback to this contract\n        market.swapExactPtForSy(\n            address(this),\n            ptAmount,\n            abi.encode(msg.sender) // data for callback\n        );\n    }\n    \n    // Callback - Market has already sent SY to this contract\n    function swapCallback(\n        int256 ptToAccount,   // negative = we owe PT to market\n        int256 syToAccount,   // positive = we received SY from market  \n        bytes calldata data\n    ) external {\n        require(msg.sender == address(market));\n        \n        // Your custom logic here (arbitrage, liquidation, etc.)\n        // ...\n        \n        // Must transfer required PT to market before callback ends\n        uint256 ptOwed = uint256(-ptToAccount);\n        IERC20(market.PT()).transfer(address(market), ptOwed);\n    }\n}\n")),(0,r.kt)("h3",{id:"interface"},"Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IPMarketSwapCallback {\n    function swapCallback(int256 ptToAccount, int256 syToAccount, bytes calldata data) external;\n}\n")),(0,r.kt)("h2",{id:"oracle"},"Oracle"),(0,r.kt)("p",null,"Pendle Markets provide oracle functionality for PT pricing and implied yield rates, adapted from Uniswap V3\u2019s time-weighted average price (TWAP) oracle."),(0,r.kt)("h3",{id:"how-it-works-1"},"How It Works"),(0,r.kt)("p",null,"The oracle stores ",(0,r.kt)("strong",{parentName:"p"},"implied rate observations")," over time, which are then used to calculate manipulation-resistant PT prices and yields."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Key Formula:")),(0,r.kt)("div",{className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mtext",{parentName:"msub"},"lnImpliedRateCumulative"),(0,r.kt)("mi",{parentName:"msub"},"i")),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mtext",{parentName:"msub"},"lnImpliedRateCumulative"),(0,r.kt)("mrow",{parentName:"msub"},(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mtext",{parentName:"mrow"},"lnImpliedRate"),(0,r.kt)("mo",{parentName:"mrow"},"\xd7"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0394"),(0,r.kt)("mi",{parentName:"mrow"},"t")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\text{lnImpliedRateCumulative}_i = \\text{lnImpliedRateCumulative}_{i-1} + \\text{lnImpliedRate} \\times \\Delta t")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.93858em",verticalAlign:"-0.24414em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"lnImpliedRateCumulative")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.21752399999999997em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.4558600000000004em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.24414em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9969109999999999em",verticalAlign:"-0.302471em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"lnImpliedRateCumulative")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.217524em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.45586em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.302471em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"lnImpliedRate")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u0394"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t")))))),(0,r.kt)("p",null,"where ",(0,r.kt)("strong",{parentName:"p"},"lnImpliedRate")," is the natural logarithm of the implied interest rate at the current market state, and ",(0,r.kt)("strong",{parentName:"p"},"\u0394t")," is the time elapsed."),(0,r.kt)("p",null,"From these cumulative values, you can compute the ",(0,r.kt)("strong",{parentName:"p"},"geometric mean price of PT")," over a given interval (see ",(0,r.kt)("a",{parentName:"p",href:"/Developers/Oracles/IntroductionOfPtOracle"},"Introduction to PT Oracle")," for details)."),(0,r.kt)("h3",{id:"integration-guide"},"Integration Guide"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/Developers/Oracles/HowToIntegratePtAndLpOracle"},"How to Integrate PT and LP Oracles")," for implementation details."),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"why-is-there-no-swapexactsy-function"},"Why is there no swapExactSy function?"),(0,r.kt)("p",null,"Unlike standard AMMs, Pendle's AMM only allows swapping exact PT in/out. Therefore, functions like ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactSyForPt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"swapPtForExactSy")," should generally be avoided. If necessary, use PendleRouter's ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactSyForPt")," with approx parameters. Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/Developers/Contracts/PendleRouter/ApiReference/PtFunctions#swapexactsyforpt"},"PendleRouter documentation")," for details."),(0,r.kt)("h3",{id:"how-can-i-trade-yt-tokens-when-the-market-only-contains-pt-and-sy"},"How can I trade YT tokens when the Market only contains PT and SY?"),(0,r.kt)("p",null,"YT tokens can be traded via ",(0,r.kt)("a",{parentName:"p",href:"/ProtocolMechanics/LiquidityEngines/AMM#flash-swaps"},"flash swaps"),". Use the PendleRouter's ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactTokenForYt")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactYtForToken")," functions, which handle the necessary flash swap logic and token transfers. Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/Developers/Contracts/PendleRouter/ApiReference/YtFunctions#swapexacttokenforyt"},"PendleRouter documentation")," for details."),(0,r.kt)("h3",{id:"why-cant-i-swap-pt-after-expiry"},"Why can\u2019t I swap PT after expiry?"),(0,r.kt)("p",null,"At expiry, PT can be redeemed for the underlying asset. Market-making no longer makes economic sense at this point and would enable circular arbitrage. To redeem PT post-expiry, use the ",(0,r.kt)("a",{parentName:"p",href:"/Developers/Contracts/PendleRouter/ApiReference/LiquidityFunctions#removeliquiditysingletoken"},"Router"),"."),(0,r.kt)("h3",{id:"should-i-use-the-router-or-interact-with-the-market-directly"},"Should I use the Router or interact with the Market directly?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use the Router for:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Any operations involving YT."),(0,r.kt)("li",{parentName:"ul"},"Swaps using tokens other than the underlying (since additional swaps are required)."),(0,r.kt)("li",{parentName:"ul"},"Fee discounts, slippage protection, etc."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Interact directly with the Market for:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Simple PT \u2194 SY swaps."),(0,r.kt)("li",{parentName:"ul"},"Flash swaps."),(0,r.kt)("li",{parentName:"ul"},"Highly gas-optimized integrations where you manage token transfers and slippage manually.")))))}d.isMDXComponent=!0}}]);