"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[7485],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(96540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},72323:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Contracts/Router","title":"Router Integration Guide","description":"The Router contract serves as the main entry point for all user interactions with Boros.","source":"@site/docs/boros/Contracts/Router.md","sourceDirName":"Contracts","slug":"/Contracts/Router","permalink":"/boros/Contracts/Router","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"borosSidebar","previous":{"title":"WebSocket","permalink":"/boros/Backend/WebSocket"},"next":{"title":"Market Hub","permalink":"/boros/Contracts/MarketHub"}}');var t=r(74848),s=r(28453);const a={},l="Router Integration Guide",d={},o=[{value:"Account Authorization",id:"account-authorization",level:2},{value:"Vault Operations",id:"vault-operations",level:2},{value:"Deposit cash",id:"deposit-cash",level:3},{value:"Withdraw cash",id:"withdraw-cash",level:3},{value:"Cash Transfer",id:"cash-transfer",level:3},{value:"Market Entry and Exit",id:"market-entry-and-exit",level:2},{value:"Enter Markets",id:"enter-markets",level:3},{value:"Exit Markets",id:"exit-markets",level:3},{value:"Order Book Trading",id:"order-book-trading",level:2},{value:"Place Single Order",id:"place-single-order",level:3},{value:"Bulk Orders",id:"bulk-orders",level:3},{value:"Cancel Orders",id:"cancel-orders",level:3},{value:"AMM",id:"amm",level:2},{value:"Add Liquidity Dual",id:"add-liquidity-dual",level:3},{value:"Add Liquidity Single Cash",id:"add-liquidity-single-cash",level:3},{value:"Remove Liquidity Dual",id:"remove-liquidity-dual",level:3},{value:"Remove Liquidity Single Cash",id:"remove-liquidity-single-cash",level:3},{value:"Simulation",id:"simulation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"router-integration-guide",children:"Router Integration Guide"})}),"\n",(0,t.jsx)(n.p,{children:"The Router contract serves as the main entry point for all user interactions with Boros."}),"\n",(0,t.jsx)(n.p,{children:"Router follows a modular architecture:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AuthModule"}),": agent authentication and delegated trading (irrelevant for external parties)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AMMModule"}),": AMM-specific operations (add/remove liquidity, swaps)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TradeModule"}),": core trading operations (enter/exit markets, place/cancel orders, cash transfer)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MiscModule"}),": utility functions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"account-authorization",children:"Account Authorization"}),"\n",(0,t.jsxs)(n.p,{children:["Currently, you can only operate on the ",(0,t.jsx)(n.strong,{children:"main account (subaccount 0)"}),". Support for other subaccounts may be added in future versions."]}),"\n",(0,t.jsx)(n.p,{children:"Most Router functions require two key parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"bool cross"})}),": Specifies margin mode (true = cross-margin, false = isolated-margin)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"MarketId marketId"})}),": The market identifier"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These parameters construct the ",(0,t.jsx)(n.code,{children:"MarketAcc"})," (Market Account) identifier:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Cross-margin account (can trade multiple markets)\nbool cross = true;\nMarketId marketId = MarketIdLib.CROSS;  // Special cross-margin value\n\n// Isolated-margin account (single market)\nbool cross = false;\nMarketId marketId = MarketId.wrap(12345);   // Specific market ID\n"})}),"\n",(0,t.jsx)(n.h2,{id:"vault-operations",children:"Vault Operations"}),"\n",(0,t.jsx)(n.p,{children:"Vault operations manage the underlying collateral tokens."}),"\n",(0,t.jsx)(n.h3,{id:"deposit-cash",children:"Deposit cash"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"router.vaultDeposit(\n    0,          // accountId (0 = main account)\n    tokenId,    // TokenId of collateral token\n    marketId,   // marketId (2^24-1 for cross account)\n    1 ether     // Raw token amount\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"withdraw-cash",children:"Withdraw cash"}),"\n",(0,t.jsx)(n.p,{children:"Withdrawals follow a two-step process: request \u2192 cooldown period \u2192 finalize."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Checking Withdrawal Status"}),": You can monitor your withdrawal request status and cooldown period through MarketHub's ",(0,t.jsx)(n.a,{href:"/boros/Contracts/MarketHub#getuserwithdrawalstatus",children:"getUserWithdrawalStatus"})," function. This returns detailed information including the pending amount and exact timestamp when withdrawal becomes available."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Step 1: Request withdrawal\nrouter.requestVaultWithdrawal(tokenId, 1 ether);\n\n// Step 2: After cooldown period, finalize withdrawal on MarketHub\nIMarketHub(marketHub).finalizeVaultWithdrawal(\n    address(this),  // root address\n    tokenId         // TokenId of collateral token\n);\n\n// Can cancel pending withdrawal\nrouter.cancelVaultWithdrawal(tokenId);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cash-transfer",children:"Cash Transfer"}),"\n",(0,t.jsx)(n.p,{children:"Transfer cash between cross-margin and isolated-margin accounts using the same collateral token."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Transfer from cross-margin to isolated-margin account\nCashTransferReq memory req = CashTransferReq({\n    marketId: marketId,        // Target isolated market\n    signedAmount: 1000e18      // Positive = from cross to isolated\n});\nrouter.cashTransfer(req);\n\n// Transfer from isolated-margin back to cross-margin account\nreq.signedAmount = -500e18;    // Negative = from isolated to cross\nrouter.cashTransfer(req);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"market-entry-and-exit",children:"Market Entry and Exit"}),"\n",(0,t.jsx)(n.h3,{id:"enter-markets",children:"Enter Markets"}),"\n",(0,t.jsx)(n.p,{children:"Users must enter markets before trading."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"MarketId[] memory marketIds = new MarketId[](2);\nmarketIds[0] = marketId0;\nmarketIds[1] = marketId1;\n\n// Enter multiple markets\nEnterExitMarketsReq memory req = EnterExitMarketsReq({\n    cross: true,\n    isEnter: true,\n    marketIds: marketIds\n});\nrouter.enterExitMarkets(req);\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Market Entry Limits"}),": Each account can enter a maximum of ",(0,t.jsx)(n.strong,{children:"10 markets"})," simultaneously. Exceeding this limit will cause transactions to revert."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Market Entrance Fees"}),": A one-time entrance fee is charged when you first interact with any market:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BTC markets"}),": 0.000008 BTC (\u2248$1 USD)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ETH markets"}),": 0.00027 ETH (\u2248$1 USD)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Minimum Cash Requirements"}),": You must maintain minimum cash balances in your account to participate in markets. Check the ",(0,t.jsx)(n.a,{href:"/boros/Contracts/MarketHub#getcashfeedata",children:"specific requirements"})," for cross vs isolated margin modes."]}),"\n",(0,t.jsx)(n.h3,{id:"exit-markets",children:"Exit Markets"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Exit Requirements"}),": To exit a market, you must:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Close all positions (zero position size)"}),"\n",(0,t.jsx)(n.li,{children:"Cancel all open orders"}),"\n",(0,t.jsx)(n.li,{children:"Have no pending settlements"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Market Maturity"}),": When markets reach maturity, you should exit them to free up market slots."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"MarketId[] memory marketIds = new MarketId[](2);\nmarketIds[0] = marketId0;\nmarketIds[1] = marketId1;\n\n// Exit multiple markets\nEnterExitMarketsReq memory req = EnterExitMarketsReq({\n    cross: true,\n    isEnter: false,\n    marketIds: marketIds\n});\nrouter.enterExitMarkets(req);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"order-book-trading",children:"Order Book Trading"}),"\n",(0,t.jsx)(n.h3,{id:"place-single-order",children:"Place Single Order"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Compound Function"}),": ",(0,t.jsx)(n.code,{children:"placeSingleOrder"})," is a compound function that can:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Automatically enter markets if ",(0,t.jsx)(n.code,{children:"enterMarket"})," is true"]}),"\n",(0,t.jsxs)(n.li,{children:["Cancel existing orders via ",(0,t.jsx)(n.code,{children:"idToStrictCancel"})]}),"\n",(0,t.jsx)(n.li,{children:"Place the new order"}),"\n",(0,t.jsx)(n.li,{children:"Transfer cash for isolated margin positions"}),"\n",(0,t.jsxs)(n.li,{children:["Automatically exit markets if ",(0,t.jsx)(n.code,{children:"exitMarket"})," is true"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This reduces the number of transactions needed for complex operations."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Basic limit order\nSingleOrderReq memory req = SingleOrderReq({\n    order: OrderReq({\n        cross: true,                    // Cross-margin\n        marketId: marketId,\n        ammId: AMMIdLib.ZERO,           // Order book only (not AMM)\n        side: Side.LONG,                // Buy interest rate swap\n        tif: TimeInForce.GTC,           // Good till cancelled\n        size: 1000e18,                  // Position size\n        tick: 125                       // Price tick (\u22485% rate)\n    }),\n    enterMarket: false,                 // Don't auto-enter market\n    idToStrictCancel: OrderIdLib.ZERO,  // No order to cancel\n    exitMarket: false,                  // Don't auto-exit\n    isolated_cashIn: 0,                 // For isolated margin only\n    isolated_cashTransferAll: false,\n    desiredMatchRate: 0                 // Accept any match rate\n});\n\nrouter.placeSingleOrder(req);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bulk-orders",children:"Bulk Orders"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Optimal for Market Makers"}),": ",(0,t.jsx)(n.code,{children:"bulkOrders"})," is designed for professional market makers and offers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Place multiple orders in a single transaction"}),"\n",(0,t.jsx)(n.li,{children:"Operate across multiple markets simultaneously"}),"\n",(0,t.jsx)(n.li,{children:"Cancel existing orders before placing new ones"}),"\n",(0,t.jsx)(n.li,{children:"Significant gas savings compared to individual order transactions"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Cancel Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isAll: true"})," - Cancel all existing orders in the market before placing new orders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isAll: false"})," - Cancel only the specific order IDs listed in the ",(0,t.jsx)(n.code,{children:"ids"})," array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isStrict: true"})," - Transaction reverts if any specified order ID doesn't exist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isStrict: false"})," - Silently skip non-existent order IDs without reverting"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Place multiple orders across different markets\nBulkOrder[] memory bulks = new BulkOrder[](2);\n\nuint256[] memory sizes0 = new uint256[](2);\nsizes0[0] = 500e18;\nsizes0[1] = 300e18;\nint16[] memory limitTicks0 = new int16[](2);\nlimitTicks0[0] = 120;\nlimitTicks0[1] = 125;\n\nbulks[0] = BulkOrder({\n    marketId: marketId1,\n    orders: LongShort({\n        tif: TimeInForce.GTC,\n        side: Side.LONG,\n        sizes: sizes0,\n        limitTicks: limitTicks0\n    }),\n    cancelData: CancelData({\n        ids: new OrderId[](0),\n        isAll: false,\n        isStrict: false\n    })\n});\n\nuint256[] memory sizes1 = new uint256[](1);\nsizes1[0] = 1900e18;\nint16[] memory limitTicks1 = new int16[](1);\nlimitTicks1[0] = 140;\n\nbulks[1] = BulkOrder({\n    marketId: marketId2,\n    orders: LongShort({\n        tif: TimeInForce.GTC,\n        side: Side.SHORT,\n        sizes: [1000e18],\n        limitTicks: [140]\n    }),\n    cancelData: CancelData({\n        ids: new OrderId[](0),\n        isAll: false,\n        isStrict: false\n    })\n});\n\nint128[] memory desiredMatchRates = new int128[](2);\ndesiredMatchRates[0] = 0;\ndesiredMatchRates[1] = 0;\n\nBulkOrdersReq memory req = BulkOrdersReq({\n    cross: true,\n    bulks: bulks,\n    desiredMatchRates: desiredMatchRates\n});\n\nBulkOrderResult[] memory results = router.bulkOrders(req);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cancel-orders",children:"Cancel Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"OrderId[] memory orderIds = new OrderId[](2);\norderIds[0] = orderId1;\norderIds[1] = orderId2;\n\n// Cancel specific orders\nBulkCancels memory cancels = BulkCancels({\n    cross: true,\n    marketId: marketId,\n    cancelAll: false,\n    orderIds: orderIds\n});\nrouter.bulkCancels(cancels);\n\n// Cancel all orders in a market\ncancels.cancelAll = true;\ncancels.orderIds = new OrderId[](0);\nrouter.bulkCancels(cancels);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"amm",children:"AMM"}),"\n",(0,t.jsx)(n.h3,{id:"add-liquidity-dual",children:"Add Liquidity Dual"}),"\n",(0,t.jsx)(n.p,{children:"Adding liquidity requires providing both cash and position sizes in proportion to the AMM's current state. The AMM automatically calculates the required ratio based on its current cash-to-position balance."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"AddLiquidityDualToAmmReq memory req = AddLiquidityDualToAmmReq({\n    cross: true,\n    ammId: ammId,\n    maxCashIn: 10000e18,\n    exactSizeIn: 1000e18,\n    minLpOut: 950e18\n});\n\n(uint256 lpOut, int256 cashIn, uint256 fee) = router.addLiquidityDualToAmm(req);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"add-liquidity-single-cash",children:"Add Liquidity Single Cash"}),"\n",(0,t.jsx)(n.p,{children:"This function simplifies liquidity provision by:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Using part of your cash to trade for the required position size"}),"\n",(0,t.jsx)(n.li,{children:"Adding the remaining cash + acquired position as dual liquidity"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"AddLiquiditySingleCashToAmmReq memory req = AddLiquiditySingleCashToAmmReq({\n    cross: true,\n    ammId: ammId,\n    enterMarket: true,\n    netCashIn: 5000e18,\n    minLpOut: 450e18\n});\n\n(uint256 lpOut, int256 cashUsed, uint256 fee, int256 swapSize) =\n    router.addLiquiditySingleCashToAmm(req);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"remove-liquidity-dual",children:"Remove Liquidity Dual"}),"\n",(0,t.jsx)(n.p,{children:"Removes liquidity and receives both cash and position sizes proportionally. You specify the LP tokens to burn and receive the underlying assets based on the AMM's current composition."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Remove liquidity and receive both cash and size\nRemoveLiquidityDualFromAmmReq memory req = RemoveLiquidityDualFromAmmReq({\n    cross: true,\n    ammId: ammId,\n    lpToRemove: 1000e18,\n    minCashOut: 4500e18,\n    minSizeOut: -1200e18,\n    maxSizeOut: -800e18\n});\n\n(int256 cashOut, int256 sizeOut, uint256 fee) = router.removeLiquidityDualFromAmm(req);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"remove-liquidity-single-cash",children:"Remove Liquidity Single Cash"}),"\n",(0,t.jsx)(n.p,{children:"Removes liquidity and converts everything to cash by:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Withdrawing proportional cash and position sizes"}),"\n",(0,t.jsx)(n.li,{children:"Trading the position sizes back to cash"}),"\n",(0,t.jsx)(n.li,{children:"Returning the total cash amount to you"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"RemoveLiquiditySingleCashFromAmmReq memory req = RemoveLiquiditySingleCashFromAmmReq({\n    cross: true,\n    ammId: ammId,\n    lpToRemove: 500e18,\n    minCashOut: 4800e18\n});\n\n(int256 cashOut, uint256 fee, int256 swapSize) =\n    router.removeLiquiditySingleCashFromAmm(req);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"simulation",children:"Simulation"}),"\n",(0,t.jsx)(n.p,{children:"The MiscModule provides simulation capabilities."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"// Simulate multiple operations\nSimulateData[] memory simulations = new SimulateData[](2);\n\nsimulations[0] = SimulateData({\n    account: mainAccount,\n    target: address(router),\n    data: abi.encodeCall(ITradeModule.placeSingleOrder, orderRequest)\n});\n\nsimulations[1] = SimulateData({\n    account: mainAccount,\n    target: address(router),\n    data: abi.encodeCall(IAMMModule.swapWithAmm, swapRequest)\n});\n\n// Get simulation results without changing state\n(bytes[] memory results, uint256[] memory gasUsed) = router.batchSimulate(simulations);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);