"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[1019],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(a),m=r,p=u["".concat(l,".").concat(m)]||u[m]||k[m]||o;return a?n.createElement(p,s(s({ref:t},c),{},{components:a})):n.createElement(p,s({ref:t},c))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4814:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const o={},s="MarketHub View Functions",i={unversionedId:"Boros/Contracts/MarketHub",id:"Boros/Contracts/MarketHub",title:"MarketHub View Functions",description:"getEnteredMarkets()",source:"@site/docs/Boros/Contracts/MarketHub.md",sourceDirName:"Boros/Contracts",slug:"/Boros/Contracts/MarketHub",permalink:"/Boros/Contracts/MarketHub",draft:!1,tags:[],version:"current",frontMatter:{}},l={},d=[{value:"<code>getEnteredMarkets()</code>",id:"getenteredmarkets",level:3},{value:"<code>hasEnteredMarketBefore()</code>",id:"hasenteredmarketbefore",level:3},{value:"<code>tokenIdToAddress()</code>",id:"tokenidtoaddress",level:3},{value:"<code>marketIdToAddress()</code>",id:"marketidtoaddress",level:3},{value:"<code>tokenData()</code>",id:"tokendata",level:3},{value:"Cash and Balance Functions",id:"cash-and-balance-functions",level:2},{value:"<code>accCash()</code>",id:"acccash",level:3},{value:"<code>getCashFeeData()</code>",id:"getcashfeedata",level:3},{value:"<code>getUserWithdrawalStatus()</code>",id:"getuserwithdrawalstatus",level:3},{value:"<code>settleAllAndGet()</code>",id:"settleallandget",level:3},{value:"<code>simulateTransfer()</code>",id:"simulatetransfer",level:3}],c={toc:d},u="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"markethub-view-functions"},"MarketHub View Functions"),(0,r.kt)("h3",{id:"getenteredmarkets"},(0,r.kt)("inlineCode",{parentName:"h3"},"getEnteredMarkets()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"MarketAcc userAccount = AccountLib.toMainCross(userAddress, tokenId);\nMarketId[] memory markets = marketHub.getEnteredMarkets(userAccount);\n")),(0,r.kt)("h3",{id:"hasenteredmarketbefore"},(0,r.kt)("inlineCode",{parentName:"h3"},"hasEnteredMarketBefore()")),(0,r.kt)("p",null,"Returns whether the account has entered the specified market before. This is used to determine if the account needs to pay a market entrance fee. When entering a market for the first time, users pay a one-time entrance fee that goes to the protocol treasury. Subsequent entries to the same market don't incur this fee."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"MarketAcc userAccount = AccountLib.toCross(userAddress, tokenId);\nMarketId marketId = MarketId.wrap(2);\n\nbool hasEnteredBefore = marketHub.hasEnteredMarketBefore(userAccount, marketId);\n")),(0,r.kt)("h3",{id:"tokenidtoaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"tokenIdToAddress()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"TokenId btcTokenId = TokenId.wrap(1);\naddress btcAddress = marketHub.tokenIdToAddress(btcTokenId);\n")),(0,r.kt)("h3",{id:"marketidtoaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"marketIdToAddress()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"MarketId btcMarketId = MarketId.wrap(456);\naddress btcMarketAddress = marketHub.marketIdToAddress(marketId);\n")),(0,r.kt)("h3",{id:"tokendata"},(0,r.kt)("inlineCode",{parentName:"h3"},"tokenData()")),(0,r.kt)("p",null,"Returns the token configuration data for the specified token ID. The ",(0,r.kt)("inlineCode",{parentName:"p"},"TokenData")," struct contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token"),": The ERC20 token contract address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scalingFactor"),": Used to normalize token decimals to 18-decimal precision for internal calculations. Calculated as ",(0,r.kt)("inlineCode",{parentName:"li"},"10^(18 - tokenDecimals)")," during token registration")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"TokenId btcTokenId = TokenId.wrap(1);\nTokenData memory data = marketHub.tokenData(tokenId);\n")),(0,r.kt)("h2",{id:"cash-and-balance-functions"},"Cash and Balance Functions"),(0,r.kt)("h3",{id:"acccash"},(0,r.kt)("inlineCode",{parentName:"h3"},"accCash()")),(0,r.kt)("p",null,"Returns the account's cash balance in scaled units. The cash balance can be negative, which represents upfront borrowing (borrowed funds that need to be repaid)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important caveats:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"NoSettle")," functions in Market contracts, this returns unsettled data that may be outdated"),(0,r.kt)("li",{parentName:"ul"},"Due to Boros's ",(0,r.kt)("a",{parentName:"li",href:"/Boros/Mechanics/Settlement"},"lazy settlement")," mechanism, positions and cash balances are only updated when users interact with the protocol"),(0,r.kt)("li",{parentName:"ul"},"To get up-to-date cash balance, you must settle first using ",(0,r.kt)("inlineCode",{parentName:"li"},"settleAllAndGet()")," or trigger settlement through other interactions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"// Check cross-margin cash balance\nMarketAcc crossAccount = AccountLib.toMainCross(userAddress, tokenId);\nint256 crossCash = marketHub.accCash(crossAccount);\n")),(0,r.kt)("h3",{id:"getcashfeedata"},(0,r.kt)("inlineCode",{parentName:"h3"},"getCashFeeData()")),(0,r.kt)("p",null,"Returns fee configuration and treasury data for the specified token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"TokenId tokenId = TokenId.wrap(1);\nCashFeeData memory feeData = marketHub.getCashFeeData(tokenId);\n\nuint128 treasuryCash = feeData.treasuryCash;          // Protocol treasury balance\nuint128 entranceFee = feeData.marketEntranceFee;      // Fee to enter markets\nuint128 minCashCross = feeData.minCashCross;          // Min cash for cross-margin\nuint128 minCashIsolated = feeData.minCashIsolated;    // Min cash for isolated\n")),(0,r.kt)("h3",{id:"getuserwithdrawalstatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"getUserWithdrawalStatus()")),(0,r.kt)("p",null,"Returns the user's pending withdrawal status."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important caveats:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"amount")," field (",(0,r.kt)("inlineCode",{parentName:"li"},"unscaled"),") is in the token's native decimal precision, not Boros's internal 18-decimal scaling"),(0,r.kt)("li",{parentName:"ul"},"To finalize the withdrawal, the condition ",(0,r.kt)("inlineCode",{parentName:"li"},"start + cooldown <= block.timestamp")," must be satisfied"),(0,r.kt)("li",{parentName:"ul"},"Cash is deducted immediately when withdrawal is requested, but tokens are only transferred after the cooldown period")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'address userAddress = 0x123...;\nTokenId tokenId = TokenId.wrap(1);\n\nWithdrawal memory withdrawal = marketHub.getUserWithdrawalStatus(userAddress, tokenId);\n\nuint32 startTime = withdrawal.start;      // Withdrawal request timestamp\nuint224 amount = withdrawal.unscaled;     // Unscaled withdrawal amount\n\nif (amount) {\n    uint32 cooldown = marketHub.getPersonalCooldown(userAddress);\n    uint32 finalizationTime = startTime + cooldown;\n\n    if (block.timestamp >= finalizationTime) {\n        console.log("Withdrawal ready for finalization");\n        console.log("Amount: %s", amount);\n    } else {\n        uint32 remaining = finalizationTime - uint32(block.timestamp);\n        console.log("Withdrawal pending, %s seconds remaining", remaining);\n    }\n} else {\n    console.log("No pending withdrawal");\n}\n')),(0,r.kt)("h3",{id:"settleallandget"},(0,r.kt)("inlineCode",{parentName:"h3"},"settleAllAndGet()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'MarketAcc userAccount = AccountLib.toMainCross(userAddress, tokenId);\nMarketId marketId = MarketId.wrap(123);\n\n// Get all settlement data and margin requirements\n(\n    int256 totalCash,\n    VMResult totalMarginData,\n) = marketHub.settleAllAndGet(userAccount, GetRequest.MM, MarketIdLib.ZERO);\n\n// Parse margin data\n(int256 totalPositionValue, uint256 totalMaintenanceMargin) = totalMarginData.unpack();\n\nconsole.log("Total value: %s", totalCash + totalPositionValue);\nconsole.log("Total Maintenance Margin: %s", totalMaintenanceMargin);\n\n// Calculate health ratio\nint256 healthRatio = (totalCash + totalPositionValue) * 1e18 / int256(marginRequired);\nconsole.log("Health ratio: %s", healthRatio);\n')),(0,r.kt)("h3",{id:"simulatetransfer"},(0,r.kt)("inlineCode",{parentName:"h3"},"simulateTransfer()")),(0,r.kt)("p",null,"Used for off-chain simulation only. This function allows simulating cash transfers to test scenarios like margin requirements or health ratios without affecting the actual blockchain state."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Requirement:")," This function can only be executed when faking ",(0,r.kt)("inlineCode",{parentName:"p"},"tx.origin = address(0)")," (using ",(0,r.kt)("inlineCode",{parentName:"p"},"eth_call")," state overrides)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"MarketAcc fromAccount = AccountLib.toMainCross(userAddress, tokenId);\nint256 transferAmount = 1 ether;\n\nmarketHub.simulateTransfer(fromAccount, transferAmount);\n")))}k.isMDXComponent=!0}}]);