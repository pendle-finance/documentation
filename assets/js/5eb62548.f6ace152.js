"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[8010],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),s=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),k=r,m=u["".concat(i,".").concat(k)]||u[k]||d[k]||a;return t?o.createElement(m,c(c({ref:n},p),{},{components:t})):o.createElement(m,c({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=k;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:r,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},2469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={},c="Boros WebSocket",l={unversionedId:"Boros/Backend/WebSocket",id:"Boros/Backend/WebSocket",title:"Boros WebSocket",description:"This guide explains how to directly connect to Boros's WebSocket service using Socket.IO client.",source:"@site/docs/Boros/Backend/WebSocket.md",sourceDirName:"Boros/Backend",slug:"/Boros/Backend/WebSocket",permalink:"/Boros/Backend/WebSocket",draft:!1,tags:[],version:"current",frontMatter:{}},i={},s=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Connection Events",id:"connection-events",level:2},{value:"Handling Connection",id:"handling-connection",level:3},{value:"Subscribing to Channels",id:"subscribing-to-channels",level:2},{value:"Cleanup",id:"cleanup",level:2},{value:"Channel Types",id:"channel-types",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example Implementation",id:"example-implementation",level:2},{value:"Error Handling",id:"error-handling",level:2}],p={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"boros-websocket"},"Boros WebSocket"),(0,r.kt)("p",null,"This guide explains how to directly connect to Boros's WebSocket service using Socket.IO client."),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Here's a complete example of how to connect to and use the WebSocket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { io } from 'socket.io-client';\n\n// Initialize the socket connection\nconst socket = io('wss://secrettune.io/pendle-dapp-v3', {\n  path: '/socket.io',\n  reconnectionAttempts: 5,\n  transports: ['websocket']\n});\n")),(0,r.kt)("h2",{id:"connection-events"},"Connection Events"),(0,r.kt)("h3",{id:"handling-connection"},"Handling Connection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"socket.on('connect', () => {\n  console.log('Connected to WebSocket server');\n});\n\nsocket.on('disconnect', () => {\n  console.log('Disconnected from WebSocket server');\n});\n\nsocket.on('connect_error', (error) => {\n  console.error('Connection error:', error);\n});\n")),(0,r.kt)("h2",{id:"subscribing-to-channels"},"Subscribing to Channels"),(0,r.kt)("p",null,"To receive updates, you need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Subscribe to a channel"),(0,r.kt)("li",{parentName:"ol"},"Listen for updates on that channel")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Subscribe to a channel\nsocket.emit('subscribe', 'orderbook:MARKET_ID:full');\n\n// Listen for updates\nsocket.on('orderbook:MARKET_ID:full:update', (data) => {\n  console.log('Received orderbook update:', data);\n});\n")),(0,r.kt)("h2",{id:"cleanup"},"Cleanup"),(0,r.kt)("p",null,"Always clean up your WebSocket connections when they're no longer needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function cleanup() {\n  // Unsubscribe from channels\n  socket.emit('unsubscribe', 'orderbook:MARKET_ID:full');\n\n  // Remove listeners\n  socket.off('orderbook:MARKET_ID:full:update');\n\n  // Disconnect\n  socket.disconnect();\n}\n")),(0,r.kt)("h2",{id:"channel-types"},"Channel Types"),(0,r.kt)("p",null,"Common channel patterns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderbook:MARKET_ID:full")," - Full orderbook updates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderbook:MARKET_ID:update")," - Incremental orderbook updates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"market-trade:MARKET_ID")," - Market trade updates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"statistics:MARKET_ID")," - Market statistics updates")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"MARKET_ID")," with your specific market identifier."),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Connection Management")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Always handle connection errors"),(0,r.kt)("li",{parentName:"ul"},"Implement reconnection logic if needed"),(0,r.kt)("li",{parentName:"ul"},"Clean up connections when no longer needed"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Event Handling")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Subscribe to channels after connection is established"),(0,r.kt)("li",{parentName:"ul"},"Remove listeners before disconnecting"),(0,r.kt)("li",{parentName:"ul"},"Handle potential errors in data processing"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Resource Management")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Unsubscribe from channels you no longer need"),(0,r.kt)("li",{parentName:"ul"},"Don't create multiple connections unnecessarily"),(0,r.kt)("li",{parentName:"ul"},"Clean up resources when your application closes")))),(0,r.kt)("h2",{id:"example-implementation"},"Example Implementation"),(0,r.kt)("p",null,"Here's a complete example putting it all together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { io } from 'socket.io-client';\n\nclass PendleWebSocket {\n  private socket: any;\n\n  constructor() {\n    this.socket = io('wss://secrettune.io/pendle-dapp-v3', {\n      path: '/socket.io',\n      reconnectionAttempts: 5,\n      transports: ['websocket']\n    });\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers() {\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n    });\n  }\n\n  public subscribeToMarket(marketId: string) {\n    const channel = `orderbook:${marketId}:full`;\n    this.socket.emit('subscribe', channel);\n\n    this.socket.on(`${channel}:update`, (data) => {\n      console.log(`Received update for ${marketId}:`, data);\n    });\n  }\n\n  public unsubscribeFromMarket(marketId: string) {\n    const channel = `orderbook:${marketId}:full`;\n    this.socket.emit('unsubscribe', channel);\n    this.socket.off(`${channel}:update`);\n  }\n\n  public disconnect() {\n    this.socket.disconnect();\n  }\n}\n\n// Usage example:\nconst ws = new PendleWebSocket();\nws.subscribeToMarket('YOUR_MARKET_ID');\n\n// Clean up when done\n// ws.unsubscribeFromMarket('YOUR_MARKET_ID');\n// ws.disconnect();\n")),(0,r.kt)("h2",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"Always implement proper error handling:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"socket.on('connect_error', (error) => {\n  console.error('Connection failed:', error);\n  // Implement your error handling logic\n});\n\nsocket.on('error', (error) => {\n  console.error('Socket error:', error);\n  // Implement your error handling logic\n});\n")))}d.isMDXComponent=!0}}]);