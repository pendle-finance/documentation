"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[7872],{3905:(t,e,n)=>{n.d(e,{Zo:()=>o,kt:()=>N});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),m=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},o=function(t){var e=m(t.components);return a.createElement(d.Provider,{value:e},t.children)},u="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,o=p(t,["components","mdxType","originalType","parentName"]),u=m(n),s=r,N=u["".concat(d,".").concat(s)]||u[s]||k[s]||l;return n?a.createElement(N,i(i({ref:e},o),{},{components:n})):a.createElement(N,i({ref:e},o))}));function N(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=s;var p={};for(var d in e)hasOwnProperty.call(e,d)&&(p[d]=e[d]);p.originalType=t,p[u]="string"==typeof t?t:r,i[1]=p;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},9627:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={hide_table_of_contents:!0},i="Simple Functions",p={unversionedId:"Developers/Contracts/PendleRouter/ApiReference/SimpleFunctions",id:"Developers/Contracts/PendleRouter/ApiReference/SimpleFunctions",title:"Simple Functions",description:"This document lists simplified versions of Pendle Router functions that use on-chain approximation algorithms instead of requiring complex parameters. These functions are automatically used by the main router when conditions allow for simplified execution.",source:"@site/docs/Developers/Contracts/PendleRouter/ApiReference/SimpleFunctions.md",sourceDirName:"Developers/Contracts/PendleRouter/ApiReference",slug:"/Developers/Contracts/PendleRouter/ApiReference/SimpleFunctions",permalink:"/Developers/Contracts/PendleRouter/ApiReference/SimpleFunctions",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"myAutogeneratedSidebar",previous:{title:"Misc Functions",permalink:"/Developers/Contracts/PendleRouter/ApiReference/MiscFunctions"},next:{title:"vePENDLE",permalink:"/Developers/Contracts/vePENDLE"}},d={},m=[{value:"Overview",id:"overview",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"PT Trading Functions",id:"pt-trading-functions",level:2},{value:"swapExactTokenForPtSimple",id:"swapexacttokenforptsimple",level:3},{value:"swapExactSyForPtSimple",id:"swapexactsyforptsimple",level:3},{value:"YT Trading Functions",id:"yt-trading-functions",level:2},{value:"swapExactTokenForYtSimple",id:"swapexacttokenforytsimple",level:3},{value:"swapExactSyForYtSimple",id:"swapexactsyforytsimple",level:3},{value:"Liquidity Management Functions",id:"liquidity-management-functions",level:2},{value:"addLiquiditySingleTokenSimple",id:"addliquiditysingletokensimple",level:3},{value:"addLiquiditySingleSySimple",id:"addliquiditysinglesysimple",level:3},{value:"addLiquiditySinglePtSimple",id:"addliquiditysingleptsimple",level:3},{value:"removeLiquiditySinglePtSimple",id:"removeliquiditysingleptsimple",level:3},{value:"When Simple Functions Are Used",id:"when-simple-functions-are-used",level:2},{value:"Advantages of Simple Functions",id:"advantages-of-simple-functions",level:2},{value:"Integration Approach",id:"integration-approach",level:2}],o={toc:m},u="wrapper";function k(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},o,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simple-functions"},"Simple Functions"),(0,r.kt)("p",null,"This document lists simplified versions of Pendle Router functions that use on-chain approximation algorithms instead of requiring complex parameters. These functions are automatically used by the main router when conditions allow for simplified execution."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Pendle Router includes simplified versions of complex functions that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use on-chain approximation algorithms (no ",(0,r.kt)("inlineCode",{parentName:"li"},"ApproxParams")," needed)"),(0,r.kt)("li",{parentName:"ul"},"Skip limit order functionality (no ",(0,r.kt)("inlineCode",{parentName:"li"},"LimitOrderData")," needed)"),(0,r.kt)("li",{parentName:"ul"},"Provide streamlined interfaces for common operations"),(0,r.kt)("li",{parentName:"ul"},"Are automatically selected when no off-chain guess is provided and limit order data is empty")),(0,r.kt)("h2",{id:"important-notes"},"Important Notes"),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Limited Flexibility"),": Simple functions don't support limit orders or custom approximation parameters."),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Market Dependent"),": Effectiveness depends on current market conditions and may not always be available."),(0,r.kt)("p",null,"The simple functions provide a streamlined interface for common operations while maintaining the full functionality of the Pendle trading system through automated approximation algorithms."),(0,r.kt)("h2",{id:"pt-trading-functions"},"PT Trading Functions"),(0,r.kt)("h3",{id:"swapexacttokenforptsimple"},"swapExactTokenForPtSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactTokenForPt")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapExactTokenForPtSimple(\n    address receiver,\n    address market,\n    uint256 minPtOut,\n    TokenInput calldata input\n) external payable returns (uint256 netPtOut, uint256 netSyFee, uint256 netSyInterm)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive PT tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minPtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum PT tokens to receive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"input"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TokenInput")),(0,r.kt)("td",{parentName:"tr",align:null},"Token input configuration")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netPtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"PT tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyInterm"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"SY tokens generated from input token")))),(0,r.kt)("h3",{id:"swapexactsyforptsimple"},"swapExactSyForPtSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactSyForPt")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapExactSyForPtSimple(\n    address receiver,\n    address market,\n    uint256 exactSyIn,\n    uint256 minPtOut\n) external returns (uint256 netPtOut, uint256 netSyFee)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive PT tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exactSyIn"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Exact amount of SY tokens to swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minPtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum PT tokens to receive")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netPtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"PT tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")))),(0,r.kt)("h2",{id:"yt-trading-functions"},"YT Trading Functions"),(0,r.kt)("h3",{id:"swapexacttokenforytsimple"},"swapExactTokenForYtSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactTokenForYt")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapExactTokenForYtSimple(\n    address receiver,\n    address market,\n    uint256 minYtOut,\n    TokenInput calldata input\n) external payable returns (uint256 netYtOut, uint256 netSyFee, uint256 netSyInterm)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive YT tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minYtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum YT tokens to receive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"input"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TokenInput")),(0,r.kt)("td",{parentName:"tr",align:null},"Token input configuration")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netYtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"YT tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyInterm"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"SY tokens generated from input token")))),(0,r.kt)("h3",{id:"swapexactsyforytsimple"},"swapExactSyForYtSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactSyForYt")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function swapExactSyForYtSimple(\n    address receiver,\n    address market,\n    uint256 exactSyIn,\n    uint256 minYtOut\n) external returns (uint256 netYtOut, uint256 netSyFee)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive YT tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exactSyIn"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Exact amount of SY tokens to swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minYtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum YT tokens to receive")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netYtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"YT tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")))),(0,r.kt)("h2",{id:"liquidity-management-functions"},"Liquidity Management Functions"),(0,r.kt)("h3",{id:"addliquiditysingletokensimple"},"addLiquiditySingleTokenSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"addLiquiditySingleToken")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function addLiquiditySingleTokenSimple(\n    address receiver,\n    address market,\n    uint256 minLpOut,\n    TokenInput calldata input\n) external payable returns (uint256 netLpOut, uint256 netSyFee, uint256 netSyInterm)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive LP tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minLpOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum LP tokens to receive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"input"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TokenInput")),(0,r.kt)("td",{parentName:"tr",align:null},"Token input configuration")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netLpOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"LP tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyInterm"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"SY tokens generated from input token")))),(0,r.kt)("h3",{id:"addliquiditysinglesysimple"},"addLiquiditySingleSySimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"addLiquiditySingleSy")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function addLiquiditySingleSySimple(\n    address receiver,\n    address market,\n    uint256 netSyIn,\n    uint256 minLpOut\n) external returns (uint256 netLpOut, uint256 netSyFee)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive LP tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyIn"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of SY tokens to use")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minLpOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum LP tokens to receive")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netLpOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"LP tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")))),(0,r.kt)("h3",{id:"addliquiditysingleptsimple"},"addLiquiditySinglePtSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"addLiquiditySinglePt")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function addLiquiditySinglePtSimple(\n    address receiver,\n    address market,\n    uint256 netPtIn,\n    uint256 minLpOut\n) external returns (uint256 netLpOut, uint256 netSyFee)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive LP tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netPtIn"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of PT tokens to use")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minLpOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum LP tokens to receive")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netLpOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"LP tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")))),(0,r.kt)("h3",{id:"removeliquiditysingleptsimple"},"removeLiquiditySinglePtSimple"),(0,r.kt)("p",null,"Simplified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"removeLiquiditySinglePt")," using on-chain approximation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function removeLiquiditySinglePtSimple(\n    address receiver,\n    address market,\n    uint256 netLpToRemove,\n    uint256 minPtOut\n) external returns (uint256 netPtOut, uint256 netSyFee)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Input Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"receiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive PT tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"market"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Pendle market address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netLpToRemove"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of LP tokens to burn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minPtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum PT tokens to receive")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Values")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netPtOut"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"PT tokens received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"netSyFee"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Trading fees paid in SY")))),(0,r.kt)("h2",{id:"when-simple-functions-are-used"},"When Simple Functions Are Used"),(0,r.kt)("p",null,"The Pendle Router automatically determines when to use simplified functions. Simple functions are used when:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"No limit orders"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"LimitOrderData")," is empty"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"No off-chain guess"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ApproxParams")," doesn't include off-chain calculated estimates"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Default parameters"),": Standard approximation parameters are used")),(0,r.kt)("h2",{id:"advantages-of-simple-functions"},"Advantages of Simple Functions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ease of Use"),": Require fewer parameters and no complex configuration."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reliability"),": Built-in approximation algorithms are optimized for common trading scenarios."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Automatic Selection"),": The main router functions automatically delegate to simple versions when no off-chain guess is provided and limit order data is empty."),(0,r.kt)("h2",{id:"integration-approach"},"Integration Approach"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Recommended Pattern"),": Always use the main router functions (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"swapExactTokenForPt"),") with default parameters. The router will automatically use simple versions when optimal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"// This may automatically use the simple version\nrouter.swapExactTokenForPt(\n    receiver,\n    market,\n    minPtOut,\n    createDefaultApproxParams(),\n    createTokenInputSimple(tokenIn, amountIn),\n    createEmptyLimitOrderData()\n);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Direct Usage"),": Only call simple functions directly if you're building custom routing logic and want to force the use of on-chain approximation."))}k.isMDXComponent=!0}}]);