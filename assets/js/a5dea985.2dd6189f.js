"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[263],{7055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Developers/Contracts/PendleRouter/ContractIntegrationGuide","title":"Pendle Router Contract Integration Guide","description":"Overview","source":"@site/docs/pendle-v2/Developers/Contracts/PendleRouter/ContractIntegrationGuide.md","sourceDirName":"Developers/Contracts/PendleRouter","slug":"/Developers/Contracts/PendleRouter/ContractIntegrationGuide","permalink":"/pendle-v2/Developers/Contracts/PendleRouter/ContractIntegrationGuide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_table_of_contents":true},"sidebar":"myAutogeneratedSidebar","previous":{"title":"Pendle Router Overview","permalink":"/pendle-v2/Developers/Contracts/PendleRouter/PendleRouterOverview"},"next":{"title":"Types and Utility Functions","permalink":"/pendle-v2/Developers/Contracts/PendleRouter/ApiReference/Types"}}');var i=t(4848),s=t(8453);const a={hide_table_of_contents:!0},d="Pendle Router Contract Integration Guide",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Quick Navigation",id:"quick-navigation",level:2},{value:"Helper functions",id:"helper-functions",level:3},{value:"Trading Operations",id:"trading-operations",level:3},{value:"Liquidity Operations",id:"liquidity-operations",level:3},{value:"Other Operations",id:"other-operations",level:3},{value:"Helper Functions",id:"helper-functions-1",level:2},{value:"PT Trading",id:"pt-trading",level:2},{value:"Buy PT with Token",id:"buy-pt-with-token",level:3},{value:"Sell PT for Token",id:"sell-pt-for-token",level:3},{value:"YT Trading",id:"yt-trading",level:2},{value:"Buy YT with Token",id:"buy-yt-with-token",level:3},{value:"Sell YT for Token",id:"sell-yt-for-token",level:3},{value:"Liquidity Management",id:"liquidity-management",level:2},{value:"Add Liquidity (Zap In)",id:"add-liquidity-zap-in",level:3},{value:"Remove Liquidity (Zap Out)",id:"remove-liquidity-zap-out",level:3},{value:"Add Liquidity (Keep YT)",id:"add-liquidity-keep-yt",level:3},{value:"Other Operations",id:"other-operations-1",level:2},{value:"Mint SY from Token",id:"mint-sy-from-token",level:3},{value:"Redeem SY to Token",id:"redeem-sy-to-token",level:3},{value:"Mint PT &amp; YT from Token",id:"mint-pt--yt-from-token",level:3},{value:"Redeem PT &amp; YT to Token",id:"redeem-pt--yt-to-token",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pendle-router-contract-integration-guide",children:"Pendle Router Contract Integration Guide"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This guide shows how to interact with the Pendle Router for common on-chain actions\u2014buying/selling PT or YT, adding/removing liquidity, minting/redeeming PT and YT, and claiming rewards. It\u2019s intended for developers who want to integrate Pendle fully on-chain without using the Pendle SDK."}),"\n",(0,i.jsxs)(n.p,{children:["For most use cases, we recommend the Pendle SDK for a better developer and end-user experience. The SDK supports zap-in/zap-out from any token, limit-order filling, and off-chain quoting, among other features. See the ",(0,i.jsx)(n.a,{href:"docs/Developers/Backend/BackendAndHostedSDK.md",children:"Pendle SDK documentation"})," for details."]}),"\n",(0,i.jsxs)(n.p,{children:["The full tutorial source code is available in ",(0,i.jsx)(n.a,{href:"https://github.com/pendle-finance/pendle-examples-public/blob/main/test/RouterSample.sol",children:"RouterSample.sol"}),". The examples target the wstETH market, but you can adapt them to other markets by changing the market and underlying asset addresses."]}),"\n",(0,i.jsx)(n.h2,{id:"quick-navigation",children:"Quick Navigation"}),"\n",(0,i.jsx)(n.h3,{id:"helper-functions",children:"Helper functions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#helper-functions",children:"Helper Functions"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"trading-operations",children:"Trading Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pt-trading",children:"PT Trading"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#yt-trading",children:"YT Trading"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"liquidity-operations",children:"Liquidity Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#liquidity-management",children:"Add Liquidity (Zap In) & Remove Liquidity (Zap Out)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#zero-price-impact-liquidity",children:"Add Liquidity (Keep YT)"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"other-operations",children:"Other Operations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sy-operations",children:"Mint/Burn SY"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pt-yt-operations",children:"Mint/Redeem PT & YT"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"helper-functions-1",children:"Helper Functions"}),"\n",(0,i.jsxs)(n.p,{children:["Since Pendle Router supports various aggregators and off-chain approximation, the function parameters can be quite complex. To simplify the usage, we provide some helper functions to create the required structs with default values. Please find the full implementation in ",(0,i.jsx)(n.a,{href:"https://github.com/pendle-finance/pendle-examples-public/blob/main/src/StructGen.sol",children:"StructGen.sol"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'import "@pendle/core-v2/contracts/interfaces/IPAllActionV3.sol";\nimport "@pendle/core-v2/contracts/interfaces/IPMarket.sol";\n\nIPAllActionV3 router = IPAllActionV3(0x888888888889758F76e7103c6CbF23ABbF58F946);\n\n// EmptySwap means no swap aggregator is involved\nSwapData public emptySwap;\n\n// EmptyLimit means no limit order is involved\nLimitOrderData public emptyLimit;\n\n// DefaultApprox means no off-chain preparation is involved, more gas consuming (~ 180k gas)\nApproxParams public defaultApprox = ApproxParams(0, type(uint256).max, 0, 256, 1e14);\n\n/// @notice create a simple TokenInput struct without using any aggregators. For more info please refer to\n/// IPAllActionTypeV3.sol\nfunction createTokenInputStruct(address tokenIn, uint256 netTokenIn) internal view returns (TokenInput memory);\n\n/// @notice create a simple TokenOutput struct without using any aggregators. For more info please refer to\n/// IPAllActionTypeV3.sol\nfunction createTokenOutputStruct(\n    address tokenOut,\n    uint256 minTokenOut\n) internal view returns (TokenOutput memory);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"pt-trading",children:"PT Trading"}),"\n",(0,i.jsx)(n.h3,{id:"buy-pt-with-token",children:"Buy PT with Token"}),"\n",(0,i.jsx)(n.p,{children:"Buying PT with underlying token. This example uses wstETH to buy PT-wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress ptReceiver = address(this);\n\nIERC20(wstETH).approve(address(router), tokenAmount);\n(uint256 netPtOut, , ) = router.swapExactTokenForPt(\n    ptReceiver,                 // receiver\n    address(market),            // market address\n    0,                          // minPtOut\n    defaultApprox,              // approximation params\n    createTokenInputStruct(wstETH, tokenAmount),  // token input\n    emptyLimit                  // limit order data\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sell-pt-for-token",children:"Sell PT for Token"}),"\n",(0,i.jsx)(n.p,{children:"Selling PT for underlying token. This example uses PT-wstETH to sell for wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n(, address PT, ) = IPMarket(market).readTokens();\naddress tokenReceiver = address(this);\n\nIERC20(PT).approve(address(router), ptAmount);\n(uint256 netTokenOut, , ) = router.swapExactPtForToken(\n    tokenReceiver,              // receiver\n    address(market),            // market address  \n    ptAmount,                   // exact PT amount to sell\n    createTokenOutputStruct(wstETH, 0),  // token output (0 = no minimum)\n    emptyLimit                  // limit order data\n);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"yt-trading",children:"YT Trading"}),"\n",(0,i.jsx)(n.h3,{id:"buy-yt-with-token",children:"Buy YT with Token"}),"\n",(0,i.jsx)(n.p,{children:"Buying YT with underlying token. This example uses wstETH to buy YT-wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress ytReceiver = address(this);\n\nIERC20(wstETH).approve(address(router), tokenAmount);\n(uint256 netYtOut, , ) = router.swapExactTokenForYt(\n    ytReceiver,                 // receiver\n    address(market),            // market address\n    0,                          // minYtOut\n    defaultApprox,              // approximation params\n    createTokenInputStruct(wstETH, tokenAmount),  // token input\n    emptyLimit                  // limit order data\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sell-yt-for-token",children:"Sell YT for Token"}),"\n",(0,i.jsx)(n.p,{children:"Selling YT for underlying token. This example uses YT-wstETH to sell for wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n(,, address YT) = IPMarket(market).readTokens();\naddress tokenReceiver = address(this);\n\nIERC20(YT).approve(address(router), ytAmount);\n(uint256 netTokenOut, , ) = router.swapExactYtForToken(\n    tokenReceiver,              // receiver\n    address(market),            // market address\n    ytAmount,                   // exact YT amount to sell\n    createTokenOutputStruct(wstETH, 0),  // token output (0 = no minimum)\n    emptyLimit                  // limit order data\n);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"liquidity-management",children:"Liquidity Management"}),"\n",(0,i.jsx)(n.h3,{id:"add-liquidity-zap-in",children:"Add Liquidity (Zap In)"}),"\n",(0,i.jsx)(n.p,{children:"Add liquidity to a market using a single underlying token. This example uses wstETH to add liquidity to wstETH market."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress lpReceiver = address(this);\n\nIERC20(wstETH).approve(address(router), tokenAmount);\n(uint256 netLpOut, , ) = router.addLiquiditySingleToken(\n    lpReceiver,                 // receiver\n    address(market),            // market address\n    0,                          // minLpOut\n    defaultApprox,              // approximation params\n    createTokenInputStruct(wstETH, tokenAmount),  // token input\n    emptyLimit                  // limit order data\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"remove-liquidity-zap-out",children:"Remove Liquidity (Zap Out)"}),"\n",(0,i.jsx)(n.p,{children:"Remove liquidity from a market to a single underlying token. This example uses wstETH market to remove liquidity to wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress tokenReceiver = address(this);\n\nIERC20(market).approve(address(router), lpAmount);\n(uint256 netTokenOut, , ) = router.removeLiquiditySingleToken(\n    address(this),              // receiver\n    address(market),            // market address\n    lpAmount,                   // exact LP amount to remove\n    createTokenOutputStruct(wstETH, 0),  // token output (0 = no minimum)\n    emptyLimit                  // limit order data\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"add-liquidity-keep-yt",children:"Add Liquidity (Keep YT)"}),"\n",(0,i.jsxs)(n.p,{children:["Add liquidity to a market using a single underlying token while keeping the YT. This example uses wstETH to add liquidity to wstETH market while keeping the YT. More information about this function can be found in the ",(0,i.jsx)(n.a,{href:"docs/Developers/Contracts/PendleRouter/ApiReference/LiquidityFunctions.md#addLiquiditySingleTokenKeepYt",children:"documentation"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress lpReceiver = address(this);\n\nIERC20(wstETH).approve(address(router), tokenAmount);\n(uint256 netLpOut, uint256 netYtOut, , ) = router.addLiquiditySingleTokenKeepYt(\n    lpReceiver,                 // receiver\n    address(market),            // market address\n    0,                          // minLpOut\n    0,                          // minYtOut\n    createTokenInputStruct(wstETH, tokenAmount)   // token input\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"other-operations-1",children:"Other Operations"}),"\n",(0,i.jsx)(n.h3,{id:"mint-sy-from-token",children:"Mint SY from Token"}),"\n",(0,i.jsx)(n.p,{children:"Mint SY using underlying token. This example uses wstETH to mint SY-wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\n(address SY,,) = IPMarket(market).readTokens();\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress syReceiver = address(this);\n\nIERC20(wstETH).approve(address(router), tokenAmount);\nuint256 netSyOut = router.mintSyFromToken(\n    syReceiver,                 // receiver\n    address(SY),                // SY token address\n    0,                          // minSyOut\n    createTokenInputStruct(wstETH, tokenAmount)   // token input\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"redeem-sy-to-token",children:"Redeem SY to Token"}),"\n",(0,i.jsx)(n.p,{children:"Redeem SY to underlying token. This example uses SY-wstETH to redeem to wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\n(address SY,,) = IPMarket(market).readTokens();\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress tokenReceiver = address(this);\n\nIERC20(SY).approve(address(router), syAmount);\nuint256 netTokenOut = router.redeemSyToToken(\n    tokenReceiver,              // receiver\n    address(SY),                // SY token address\n    syAmount,                   // exact SY amount to redeem\n    createTokenOutputStruct(wstETH, 0)    // token output (0 = no minimum)\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mint-pt--yt-from-token",children:"Mint PT & YT from Token"}),"\n",(0,i.jsx)(n.p,{children:"Mint both PT and YT using underlying token. This example uses wstETH to mint PT-wstETH and YT-wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\n(,, address YT) = IPMarket(market).readTokens();\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress pyReceiver = address(this);\n\nIERC20(wstETH).approve(address(router), tokenAmount);\n(uint256 netPyOut, ) = router.mintPyFromToken(\n    pyReceiver,                 // receiver\n    address(YT),                // YT token address (used to identify market)\n    0,                          // minPyOut\n    createTokenInputStruct(wstETH, tokenAmount)   // token input\n);\n// netPyOut represents both PT and YT amounts (they're equal)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"redeem-pt--yt-to-token",children:"Redeem PT & YT to Token"}),"\n",(0,i.jsx)(n.p,{children:"Redeem both PT and YT to underlying token. This example uses PT-wstETH and YT-wstETH to redeem to wstETH."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"address market = 0xD0354D4e7bCf345fB117cabe41aCaDb724eccCa2;\n(, address PT, address YT) = IPMarket(market).readTokens();\naddress wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\naddress tokenReceiver = address(this);\n\nIERC20(PT).approve(address(router), pyAmount);\nIERC20(YT).approve(address(router), pyAmount);\n\n(uint256 netTokenOut, ) = router.redeemPyToToken(\n    tokenReceiver,              // receiver\n    address(YT),                // YT token address (used to identify market)\n    pyAmount,                   // exact PT+YT amount to redeem\n    createTokenOutputStruct(wstETH, 0)    // token output (0 = no minimum)\n);\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);